{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Work\\\\Desktop\\\\Coden\\\\sorting-algorithms\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Work\\\\Desktop\\\\Coden\\\\sorting-algorithms\\\\src\\\\components\\\\App\\\\App.jsx\";\nimport React, { Component } from 'react';\nimport { Box, Grommet } from 'grommet';\nimport Header from './Header'; // change this value for the speed of the animation\n\nconst ANIMATION_SPEED_MS = 1;\nconst theme = {\n  global: {\n    colors: {\n      brand: '#061533',\n      focus: 'transparent',\n      'accent-1': '#B578E8',\n      text: {\n        light: '#000'\n      }\n    },\n    font: {\n      family: 'Poppins',\n      size: '18px'\n    }\n  }\n};\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      arraySize: 50,\n      sortingAlgorithm: 'Heap Sort',\n      arrayValues: [],\n      sorting: false\n    };\n\n    this.updateArraySize = e => {\n      this.setState({\n        arraySize: e.target.value\n      }, () => this.generateNewArray());\n    };\n\n    this.updateSortingAlgorithm = e => {\n      this.setState({\n        sortingAlgorithm: e.target.innerText\n      });\n    };\n\n    this.generateNewArray = () => {\n      let arrayValues = [],\n          bars = document.getElementsByClassName('array-bar');\n\n      for (let i = 0; i < this.state.arraySize; i++) {\n        arrayValues.push(100 + 5 * Math.floor(Math.random() * Math.floor(100)));\n\n        if (bars[i] !== undefined) {\n          bars[i].style.backgroundColor = '#B578E8';\n        }\n      }\n\n      this.setState({\n        arrayValues: arrayValues\n      });\n    };\n\n    this.heapify = (arr, len, i, animation) => {\n      let largest = i;\n      let left = i * 2 + 1;\n      let right = left + 1; // comparison add\n\n      animation.push(['#FF4040', left, 'c']);\n      animation.push(['#FF4040', la, 'c']);\n\n      if (left < len && arr[left] > arr[largest]) {\n        largest = left;\n      }\n\n      if (right < len && arr[right] > arr[largest]) {\n        largest = right;\n      }\n\n      if (largest !== i) {\n        // swap\n        this.swap(arr, i, largest, animation);\n        this.heapify(arr, len, largest, animation);\n      }\n\n      return arr;\n    };\n\n    this.heapSort = (arr, animation) => {\n      let len = arr.length;\n      let i = Math.floor(len / 2 - 1);\n      let k = len - 1;\n\n      while (i >= 0) {\n        this.heapify(arr, len, i, animation);\n        i--;\n      }\n\n      while (k >= 0) {\n        //swap\n        this.swap(arr, 0, k, animation);\n        this.heapify(arr, k, 0, animation);\n        k--;\n      }\n\n      return arr;\n    };\n\n    this.merge = (mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animation) => {\n      let k = startIdx;\n      let i = startIdx;\n      let j = middleIdx + 1;\n\n      while (i <= middleIdx && j <= endIdx) {\n        //comparison add\n        animation.push(['#FF4040', i, 'c']);\n        animation.push(['#FF4040', j, 'c']);\n\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n          //comparison success\n          animation.push(['#6FFFB0', i, 'c']);\n          animation.push(['#6FFFB0', j, 'c']); // comparison remove\n\n          animation.push(['#B578E8', i, 'c']);\n          animation.push(['#B578E8', j, 'c']); // animate swap\n\n          animation.push([auxiliaryArray[i], k, 'cV']);\n          mainArray[k++] = auxiliaryArray[i++];\n        } else {\n          // comparison remove\n          animation.push(['#B578E8', i, 'c']);\n          animation.push(['#B578E8', j, 'c']); // animate swap\n\n          animation.push([auxiliaryArray[j], k, 'cV']);\n          mainArray[k++] = auxiliaryArray[j++];\n        }\n      }\n\n      while (i <= middleIdx) {\n        //comparison add\n        animation.push(['#FF4040', i, 'c']); // comparison remove\n\n        animation.push(['#B578E8', i, 'c']); // animate swap\n\n        animation.push([auxiliaryArray[i], k, 'cV']);\n        mainArray[k++] = auxiliaryArray[i++];\n      }\n\n      while (j <= endIdx) {\n        //comparison add\n        animation.push(['#FF4040', j, 'c']); // comparison remove\n\n        animation.push(['#B578E8', j, 'c']); // animate swap\n\n        animation.push([auxiliaryArray[j], k, 'cV']);\n        mainArray[k++] = auxiliaryArray[j++];\n      }\n    };\n\n    this.mergeSort = (mainArray, startIdx, endIdx, auxiliaryArray, animation) => {\n      if (startIdx === endIdx) return;\n      const middleIdx = Math.floor((startIdx + endIdx) / 2);\n      this.mergeSort(auxiliaryArray, startIdx, middleIdx, mainArray, animation);\n      this.mergeSort(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animation);\n      this.merge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animation);\n    };\n\n    this.swap = (arr, i, j, animation) => {\n      const temp = arr[i]; // animate swap\n\n      animation.push([arr[j], i, 'cV']);\n      animation.push([temp, j, 'cV']);\n      arr[i] = arr[j];\n      arr[j] = temp;\n    };\n\n    this.partition = (arr, pivot, left, right, animation) => {\n      let pivotValue = arr[pivot],\n          partitionIndex = left; // add pivot\n\n      animation.push(['#FF4040', pivot, 'c']);\n\n      for (let i = left; i < right; i++) {\n        // add partition index\n        animation.push(['#FFAA15', partitionIndex, 'c']); // add comparison\n\n        animation.push(['#FF4040', i, 'c']);\n\n        if (arr[i] < pivotValue) {\n          // comparison success\n          animation.push(['#6FFFB0', i, 'c']); // remove comparison success\n\n          animation.push(['#B578E8', i, 'c']);\n          this.swap(arr, i, partitionIndex, animation); // remove old partition index\n\n          animation.push(['#B578E8', partitionIndex, 'c']);\n          partitionIndex++; // add new partition index\n\n          animation.push(['#FFAA15', partitionIndex, 'c']);\n        } // remove comparison\n\n\n        animation.push(['#B578E8', i, 'c']);\n      } // remove partition index\n\n\n      animation.push(['#B578E8', partitionIndex, 'c']);\n      this.swap(arr, right, partitionIndex, animation); // remove pivot\n\n      animation.push(['#B578E8', pivot, 'c']);\n      return partitionIndex;\n    };\n\n    this.quickSort = (arr, left, right, animation) => {\n      let pivot, partitionIndex;\n\n      if (left < right) {\n        pivot = right;\n        partitionIndex = this.partition(arr, pivot, left, right, animation); //sort left and right\n\n        this.quickSort(arr, left, partitionIndex - 1, animation);\n        this.quickSort(arr, partitionIndex + 1, right, animation);\n      }\n\n      return arr;\n    };\n\n    this.animateSorting = animation => {\n      for (let i = 0; i < animation.length; i++) {\n        const _animation$i = _slicedToArray(animation[i], 3),\n              value = _animation$i[0],\n              barId = _animation$i[1],\n              animationType = _animation$i[2],\n              barStyle = document.getElementsByClassName('array-bar')[barId].style,\n              isLastIteration = i === animation.length - 1 ? true : false;\n\n        if (animationType === 'c') {\n          setTimeout(() => {\n            barStyle.backgroundColor = value;\n          }, i * ANIMATION_SPEED_MS);\n        } else if (animationType === 'cV') {\n          setTimeout(() => {\n            barStyle.height = \"\".concat(value, \"px\");\n          }, i * ANIMATION_SPEED_MS);\n        }\n\n        if (isLastIteration) {\n          setTimeout(() => {\n            this.setState({\n              sorting: false\n            });\n          }, i * ANIMATION_SPEED_MS);\n        }\n      }\n    };\n\n    this.startSorting = () => {\n      this.setState({\n        sorting: true\n      });\n      let arr = this.state.arrayValues.map(a => a),\n          sortedArr = arr.slice().sort((a, b) => a - b),\n          animation = [];\n\n      if (this.state.sortingAlgorithm === 'Quick Sort') {\n        this.quickSort(arr, 0, arr.length - 1, animation);\n      } else if (this.state.sortingAlgorithm === 'Merge Sort') {\n        let auxiliaryArray = arr.slice();\n        this.mergeSort(arr, 0, arr.length - 1, auxiliaryArray, animation);\n      } else if (this.state.sortingAlgorithm === 'Heap Sort') {\n        this.heapSort(arr, animation);\n      }\n\n      arr.forEach((value, id) => {\n        if (sortedArr[id] === value) {\n          animation.push(['#6399F1', id, 'c']);\n        }\n      });\n      this.animateSorting(animation);\n    };\n  }\n\n  componentDidMount() {\n    this.generateNewArray();\n  }\n\n  render() {\n    return React.createElement(Grommet, {\n      theme: theme,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }, React.createElement(Header, {\n      updateArraySize: this.updateArraySize,\n      updateSortingAlgorithm: this.updateSortingAlgorithm,\n      arraySize: this.state.arraySize,\n      sortingAlgorithm: this.state.sortingAlgorithm,\n      generateNewArray: this.generateNewArray,\n      startSorting: this.startSorting,\n      sorting: this.state.sorting,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }), React.createElement(Box, {\n      justify: \"center\",\n      margin: {\n        horizontal: 'xlarge',\n        top: 'medium'\n      },\n      direction: \"row\" //align=\"center\"\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }, this.state.arrayValues.map((value, position) => React.createElement(Box, {\n      key: position,\n      width: \"3px\",\n      margin: \"1.5px\",\n      style: {\n        height: \"\".concat(value, \"px\")\n      },\n      responsive: false,\n      background: \"accent-1\",\n      className: \"array-bar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\Work\\Desktop\\Coden\\sorting-algorithms\\src\\components\\App\\App.jsx"],"names":["React","Component","Box","Grommet","Header","ANIMATION_SPEED_MS","theme","global","colors","brand","focus","text","light","font","family","size","App","state","arraySize","sortingAlgorithm","arrayValues","sorting","updateArraySize","e","setState","target","value","generateNewArray","updateSortingAlgorithm","innerText","bars","document","getElementsByClassName","i","push","Math","floor","random","undefined","style","backgroundColor","heapify","arr","len","animation","largest","left","right","la","swap","heapSort","length","k","merge","mainArray","startIdx","middleIdx","endIdx","auxiliaryArray","j","mergeSort","temp","partition","pivot","pivotValue","partitionIndex","quickSort","animateSorting","barId","animationType","barStyle","isLastIteration","setTimeout","height","startSorting","map","a","sortedArr","slice","sort","b","forEach","id","componentDidMount","render","horizontal","top","position"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Box, Grommet } from 'grommet';\r\nimport Header from './Header';\r\n\r\n// change this value for the speed of the animation\r\nconst ANIMATION_SPEED_MS = 1;\r\nconst theme = {\r\n\tglobal: {\r\n\t\tcolors: {\r\n\t\t\tbrand: '#061533',\r\n\t\t\tfocus: 'transparent',\r\n\t\t\t'accent-1': '#B578E8',\r\n\t\t\ttext: {\r\n\t\t\t\tlight: '#000'\r\n\t\t\t}\r\n\t\t},\r\n\t\tfont: {\r\n\t\t\tfamily: 'Poppins',\r\n\t\t\tsize: '18px'\r\n\t\t}\r\n\t}\r\n};\r\n\r\nclass App extends Component {\r\n\tstate = {\r\n\t\tarraySize: 50,\r\n\t\tsortingAlgorithm: 'Heap Sort',\r\n\t\tarrayValues: [],\r\n\t\tsorting: false\r\n\t};\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.generateNewArray();\r\n\t}\r\n\r\n\tupdateArraySize = e => {\r\n\t\tthis.setState({ arraySize: e.target.value }, () =>\r\n\t\t\tthis.generateNewArray()\r\n\t\t);\r\n\t};\r\n\r\n\tupdateSortingAlgorithm = e => {\r\n\t\tthis.setState({ sortingAlgorithm: e.target.innerText });\r\n\t};\r\n\r\n\tgenerateNewArray = () => {\r\n\t\tlet arrayValues = [],\r\n\t\t\tbars = document.getElementsByClassName('array-bar');\r\n\t\tfor (let i = 0; i < this.state.arraySize; i++) {\r\n\t\t\tarrayValues.push(\r\n\t\t\t\t100 + 5 * Math.floor(Math.random() * Math.floor(100))\r\n\t\t\t);\r\n\t\t\tif (bars[i] !== undefined) {\r\n\t\t\t\tbars[i].style.backgroundColor = '#B578E8';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.setState({\r\n\t\t\tarrayValues: arrayValues\r\n\t\t});\r\n\t};\r\n\r\n\t// HEAP SORT ALGORITHM\r\n\r\n\theapify = (arr, len, i, animation) => {\r\n\t\tlet largest = i;\r\n\t\tlet left = i * 2 + 1;\r\n\t\tlet right = left + 1;\r\n\r\n\t\t// comparison add\r\n\t\tanimation.push(['#FF4040', left, 'c']);\r\n\t\tanimation.push(['#FF4040', la, 'c']);\r\n\t\tif (left < len && arr[left] > arr[largest]) {\r\n\t\t\tlargest = left;\r\n\t\t}\r\n\r\n\t\tif (right < len && arr[right] > arr[largest]) {\r\n\t\t\tlargest = right;\r\n\t\t}\r\n\r\n\t\tif (largest !== i) {\r\n\t\t\t// swap\r\n\t\t\tthis.swap(arr, i, largest, animation);\r\n\t\t\tthis.heapify(arr, len, largest, animation);\r\n\t\t}\r\n\r\n\t\treturn arr;\r\n\t};\r\n\r\n\theapSort = (arr, animation) => {\r\n\t\tlet len = arr.length;\r\n\t\tlet i = Math.floor(len / 2 - 1);\r\n\t\tlet k = len - 1;\r\n\r\n\t\twhile (i >= 0) {\r\n\t\t\tthis.heapify(arr, len, i, animation);\r\n\t\t\ti--;\r\n\t\t}\r\n\r\n\t\twhile (k >= 0) {\r\n\t\t\t//swap\r\n\t\t\tthis.swap(arr, 0, k, animation);\r\n\t\t\tthis.heapify(arr, k, 0, animation);\r\n\t\t\tk--;\r\n\t\t}\r\n\r\n\t\treturn arr;\r\n\t};\r\n\r\n\t// MERGE SORT ALGORITHM\r\n\r\n\tmerge = (\r\n\t\tmainArray,\r\n\t\tstartIdx,\r\n\t\tmiddleIdx,\r\n\t\tendIdx,\r\n\t\tauxiliaryArray,\r\n\t\tanimation\r\n\t) => {\r\n\t\tlet k = startIdx;\r\n\t\tlet i = startIdx;\r\n\t\tlet j = middleIdx + 1;\r\n\t\twhile (i <= middleIdx && j <= endIdx) {\r\n\t\t\t//comparison add\r\n\t\t\tanimation.push(['#FF4040', i, 'c']);\r\n\t\t\tanimation.push(['#FF4040', j, 'c']);\r\n\r\n\t\t\tif (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n\t\t\t\t//comparison success\r\n\t\t\t\tanimation.push(['#6FFFB0', i, 'c']);\r\n\t\t\t\tanimation.push(['#6FFFB0', j, 'c']);\r\n\t\t\t\t// comparison remove\r\n\t\t\t\tanimation.push(['#B578E8', i, 'c']);\r\n\t\t\t\tanimation.push(['#B578E8', j, 'c']);\r\n\t\t\t\t// animate swap\r\n\t\t\t\tanimation.push([auxiliaryArray[i], k, 'cV']);\r\n\t\t\t\tmainArray[k++] = auxiliaryArray[i++];\r\n\t\t\t} else {\r\n\t\t\t\t// comparison remove\r\n\t\t\t\tanimation.push(['#B578E8', i, 'c']);\r\n\t\t\t\tanimation.push(['#B578E8', j, 'c']);\r\n\t\t\t\t// animate swap\r\n\t\t\t\tanimation.push([auxiliaryArray[j], k, 'cV']);\r\n\t\t\t\tmainArray[k++] = auxiliaryArray[j++];\r\n\t\t\t}\r\n\t\t}\r\n\t\twhile (i <= middleIdx) {\r\n\t\t\t//comparison add\r\n\t\t\tanimation.push(['#FF4040', i, 'c']);\r\n\t\t\t// comparison remove\r\n\t\t\tanimation.push(['#B578E8', i, 'c']);\r\n\t\t\t// animate swap\r\n\t\t\tanimation.push([auxiliaryArray[i], k, 'cV']);\r\n\t\t\tmainArray[k++] = auxiliaryArray[i++];\r\n\t\t}\r\n\t\twhile (j <= endIdx) {\r\n\t\t\t//comparison add\r\n\t\t\tanimation.push(['#FF4040', j, 'c']);\r\n\t\t\t// comparison remove\r\n\t\t\tanimation.push(['#B578E8', j, 'c']);\r\n\t\t\t// animate swap\r\n\t\t\tanimation.push([auxiliaryArray[j], k, 'cV']);\r\n\t\t\tmainArray[k++] = auxiliaryArray[j++];\r\n\t\t}\r\n\t};\r\n\r\n\tmergeSort = (mainArray, startIdx, endIdx, auxiliaryArray, animation) => {\r\n\t\tif (startIdx === endIdx) return;\r\n\t\tconst middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n\t\tthis.mergeSort(\r\n\t\t\tauxiliaryArray,\r\n\t\t\tstartIdx,\r\n\t\t\tmiddleIdx,\r\n\t\t\tmainArray,\r\n\t\t\tanimation\r\n\t\t);\r\n\t\tthis.mergeSort(\r\n\t\t\tauxiliaryArray,\r\n\t\t\tmiddleIdx + 1,\r\n\t\t\tendIdx,\r\n\t\t\tmainArray,\r\n\t\t\tanimation\r\n\t\t);\r\n\t\tthis.merge(\r\n\t\t\tmainArray,\r\n\t\t\tstartIdx,\r\n\t\t\tmiddleIdx,\r\n\t\t\tendIdx,\r\n\t\t\tauxiliaryArray,\r\n\t\t\tanimation\r\n\t\t);\r\n\t};\r\n\r\n\t// QUICK SORT ALGORITHM\r\n\r\n\tswap = (arr, i, j, animation) => {\r\n\t\tconst temp = arr[i];\r\n\t\t// animate swap\r\n\t\tanimation.push([arr[j], i, 'cV']);\r\n\t\tanimation.push([temp, j, 'cV']);\r\n\t\tarr[i] = arr[j];\r\n\t\tarr[j] = temp;\r\n\t};\r\n\r\n\tpartition = (arr, pivot, left, right, animation) => {\r\n\t\tlet pivotValue = arr[pivot],\r\n\t\t\tpartitionIndex = left;\r\n\t\t// add pivot\r\n\t\tanimation.push(['#FF4040', pivot, 'c']);\r\n\t\tfor (let i = left; i < right; i++) {\r\n\t\t\t// add partition index\r\n\t\t\tanimation.push(['#FFAA15', partitionIndex, 'c']);\r\n\t\t\t// add comparison\r\n\t\t\tanimation.push(['#FF4040', i, 'c']);\r\n\t\t\tif (arr[i] < pivotValue) {\r\n\t\t\t\t// comparison success\r\n\t\t\t\tanimation.push(['#6FFFB0', i, 'c']);\r\n\t\t\t\t// remove comparison success\r\n\t\t\t\tanimation.push(['#B578E8', i, 'c']);\r\n\t\t\t\tthis.swap(arr, i, partitionIndex, animation);\r\n\t\t\t\t// remove old partition index\r\n\t\t\t\tanimation.push(['#B578E8', partitionIndex, 'c']);\r\n\t\t\t\tpartitionIndex++;\r\n\t\t\t\t// add new partition index\r\n\t\t\t\tanimation.push(['#FFAA15', partitionIndex, 'c']);\r\n\t\t\t}\r\n\t\t\t// remove comparison\r\n\t\t\tanimation.push(['#B578E8', i, 'c']);\r\n\t\t}\r\n\t\t// remove partition index\r\n\t\tanimation.push(['#B578E8', partitionIndex, 'c']);\r\n\t\tthis.swap(arr, right, partitionIndex, animation);\r\n\t\t// remove pivot\r\n\t\tanimation.push(['#B578E8', pivot, 'c']);\r\n\t\treturn partitionIndex;\r\n\t};\r\n\r\n\tquickSort = (arr, left, right, animation) => {\r\n\t\tlet pivot, partitionIndex;\r\n\r\n\t\tif (left < right) {\r\n\t\t\tpivot = right;\r\n\t\t\tpartitionIndex = this.partition(arr, pivot, left, right, animation);\r\n\r\n\t\t\t//sort left and right\r\n\t\t\tthis.quickSort(arr, left, partitionIndex - 1, animation);\r\n\t\t\tthis.quickSort(arr, partitionIndex + 1, right, animation);\r\n\t\t}\r\n\r\n\t\treturn arr;\r\n\t};\r\n\r\n\t// ANIMATE SORTING\r\n\r\n\tanimateSorting = animation => {\r\n\t\tfor (let i = 0; i < animation.length; i++) {\r\n\t\t\tconst [value, barId, animationType] = animation[i],\r\n\t\t\t\tbarStyle = document.getElementsByClassName('array-bar')[barId]\r\n\t\t\t\t\t.style,\r\n\t\t\t\tisLastIteration = i === animation.length - 1 ? true : false;\r\n\r\n\t\t\tif (animationType === 'c') {\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tbarStyle.backgroundColor = value;\r\n\t\t\t\t}, i * ANIMATION_SPEED_MS);\r\n\t\t\t} else if (animationType === 'cV') {\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tbarStyle.height = `${value}px`;\r\n\t\t\t\t}, i * ANIMATION_SPEED_MS);\r\n\t\t\t}\r\n\r\n\t\t\tif (isLastIteration) {\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tthis.setState({ sorting: false });\r\n\t\t\t\t}, i * ANIMATION_SPEED_MS);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tstartSorting = () => {\r\n\t\tthis.setState({ sorting: true });\r\n\t\tlet arr = this.state.arrayValues.map(a => a),\r\n\t\t\tsortedArr = arr.slice().sort((a, b) => a - b),\r\n\t\t\tanimation = [];\r\n\r\n\t\tif (this.state.sortingAlgorithm === 'Quick Sort') {\r\n\t\t\tthis.quickSort(arr, 0, arr.length - 1, animation);\r\n\t\t} else if (this.state.sortingAlgorithm === 'Merge Sort') {\r\n\t\t\tlet auxiliaryArray = arr.slice();\r\n\t\t\tthis.mergeSort(arr, 0, arr.length - 1, auxiliaryArray, animation);\r\n\t\t} else if (this.state.sortingAlgorithm === 'Heap Sort') {\r\n\t\t\tthis.heapSort(arr, animation);\r\n\t\t}\r\n\r\n\t\tarr.forEach((value, id) => {\r\n\t\t\tif (sortedArr[id] === value) {\r\n\t\t\t\tanimation.push(['#6399F1', id, 'c']);\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.animateSorting(animation);\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Grommet theme={theme}>\r\n\t\t\t\t<Header\r\n\t\t\t\t\tupdateArraySize={this.updateArraySize}\r\n\t\t\t\t\tupdateSortingAlgorithm={this.updateSortingAlgorithm}\r\n\t\t\t\t\tarraySize={this.state.arraySize}\r\n\t\t\t\t\tsortingAlgorithm={this.state.sortingAlgorithm}\r\n\t\t\t\t\tgenerateNewArray={this.generateNewArray}\r\n\t\t\t\t\tstartSorting={this.startSorting}\r\n\t\t\t\t\tsorting={this.state.sorting}\r\n\t\t\t\t/>\r\n\t\t\t\t<Box\r\n\t\t\t\t\tjustify=\"center\"\r\n\t\t\t\t\tmargin={{ horizontal: 'xlarge', top: 'medium' }}\r\n\t\t\t\t\tdirection=\"row\"\r\n\t\t\t\t\t//align=\"center\"\r\n\t\t\t\t>\r\n\t\t\t\t\t{this.state.arrayValues.map((value, position) => (\r\n\t\t\t\t\t\t<Box\r\n\t\t\t\t\t\t\tkey={position}\r\n\t\t\t\t\t\t\twidth=\"3px\"\r\n\t\t\t\t\t\t\tmargin=\"1.5px\"\r\n\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\theight: `${value}px`\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\tresponsive={false}\r\n\t\t\t\t\t\t\tbackground=\"accent-1\"\r\n\t\t\t\t\t\t\tclassName=\"array-bar\"\r\n\t\t\t\t\t\t></Box>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</Box>\r\n\t\t\t</Grommet>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}