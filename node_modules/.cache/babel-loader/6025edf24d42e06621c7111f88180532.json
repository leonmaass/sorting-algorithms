{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Work\\\\Desktop\\\\Coden\\\\sorting-algorithms\\\\src\\\\components\\\\App\\\\App.jsx\";\nimport React, { Component } from 'react';\nimport { Box, Grommet } from 'grommet';\nimport Header from './Header'; // change this value for the speed of the animation\n\nconst ANIMATION_SPEED_MS = 1;\nconst theme = {\n  global: {\n    colors: {\n      brand: '#061533',\n      focus: 'transparent',\n      'accent-1': '#B578E8',\n      text: {\n        light: '#000'\n      }\n    },\n    font: {\n      family: 'Poppins',\n      size: '18px'\n    }\n  }\n};\n\nclass App extends Component {\n  constructor() {}\n\n  componentDidMount() {\n    this.generateNewArray();\n  }\n\n  render() {\n    return React.createElement(Grommet, {\n      theme: theme,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }, React.createElement(Header, {\n      updateArraySize: this.updateArraySize,\n      updateSortingAlgorithm: this.updateSortingAlgorithm,\n      arraySize: this.state.arraySize,\n      sortingAlgorithm: this.state.sortingAlgorithm,\n      generateNewArray: this.generateNewArray,\n      startSorting: this.startSorting,\n      sorting: this.state.sorting,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    }), React.createElement(Box, {\n      justify: \"center\",\n      margin: {\n        horizontal: 'xlarge',\n        top: 'medium'\n      },\n      direction: \"row\" //align=\"center\"\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    }, this.state.arrayValues.map((value, position) => React.createElement(Box, {\n      key: position,\n      width: \"3px\",\n      margin: \"1.5px\",\n      style: {\n        height: \"\".concat(value, \"px\")\n      },\n      responsive: false,\n      background: \"accent-1\",\n      className: \"array-bar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\Work\\Desktop\\Coden\\sorting-algorithms\\src\\components\\App\\App.jsx"],"names":["React","Component","Box","Grommet","Header","ANIMATION_SPEED_MS","theme","global","colors","brand","focus","text","light","font","family","size","App","constructor","componentDidMount","generateNewArray","render","updateArraySize","updateSortingAlgorithm","state","arraySize","sortingAlgorithm","startSorting","sorting","horizontal","top","arrayValues","map","value","position","height"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,GAAT,EAAcC,OAAd,QAA6B,SAA7B;AACA,OAAOC,MAAP,MAAmB,UAAnB,C,CAEA;;AACA,MAAMC,kBAAkB,GAAG,CAA3B;AACA,MAAMC,KAAK,GAAG;AACbC,EAAAA,MAAM,EAAE;AACPC,IAAAA,MAAM,EAAE;AACPC,MAAAA,KAAK,EAAE,SADA;AAEPC,MAAAA,KAAK,EAAE,aAFA;AAGP,kBAAY,SAHL;AAIPC,MAAAA,IAAI,EAAE;AACLC,QAAAA,KAAK,EAAE;AADF;AAJC,KADD;AASPC,IAAAA,IAAI,EAAE;AACLC,MAAAA,MAAM,EAAE,SADH;AAELC,MAAAA,IAAI,EAAE;AAFD;AATC;AADK,CAAd;;AAiBA,MAAMC,GAAN,SAAkBf,SAAlB,CAA4B;AAC3BgB,EAAAA,WAAW,GAAG,CAEb;;AASDC,EAAAA,iBAAiB,GAAG;AACnB,SAAKC,gBAAL;AACA;;AAsSDC,EAAAA,MAAM,GAAG;AACR,WACC,oBAAC,OAAD;AAAS,MAAA,KAAK,EAAEd,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,oBAAC,MAAD;AACC,MAAA,eAAe,EAAE,KAAKe,eADvB;AAEC,MAAA,sBAAsB,EAAE,KAAKC,sBAF9B;AAGC,MAAA,SAAS,EAAE,KAAKC,KAAL,CAAWC,SAHvB;AAIC,MAAA,gBAAgB,EAAE,KAAKD,KAAL,CAAWE,gBAJ9B;AAKC,MAAA,gBAAgB,EAAE,KAAKN,gBALxB;AAMC,MAAA,YAAY,EAAE,KAAKO,YANpB;AAOC,MAAA,OAAO,EAAE,KAAKH,KAAL,CAAWI,OAPrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,EAUC,oBAAC,GAAD;AACC,MAAA,OAAO,EAAC,QADT;AAEC,MAAA,MAAM,EAAE;AAAEC,QAAAA,UAAU,EAAE,QAAd;AAAwBC,QAAAA,GAAG,EAAE;AAA7B,OAFT;AAGC,MAAA,SAAS,EAAC,KAHX,CAIC;AAJD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAME,KAAKN,KAAL,CAAWO,WAAX,CAAuBC,GAAvB,CAA2B,CAACC,KAAD,EAAQC,QAAR,KAC3B,oBAAC,GAAD;AACC,MAAA,GAAG,EAAEA,QADN;AAEC,MAAA,KAAK,EAAC,KAFP;AAGC,MAAA,MAAM,EAAC,OAHR;AAIC,MAAA,KAAK,EAAE;AACNC,QAAAA,MAAM,YAAKF,KAAL;AADA,OAJR;AAOC,MAAA,UAAU,EAAE,KAPb;AAQC,MAAA,UAAU,EAAC,UARZ;AASC,MAAA,SAAS,EAAC,WATX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,CANF,CAVD,CADD;AAiCA;;AAtV0B;;AAyV5B,eAAehB,GAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { Box, Grommet } from 'grommet';\r\nimport Header from './Header';\r\n\r\n// change this value for the speed of the animation\r\nconst ANIMATION_SPEED_MS = 1;\r\nconst theme = {\r\n\tglobal: {\r\n\t\tcolors: {\r\n\t\t\tbrand: '#061533',\r\n\t\t\tfocus: 'transparent',\r\n\t\t\t'accent-1': '#B578E8',\r\n\t\t\ttext: {\r\n\t\t\t\tlight: '#000'\r\n\t\t\t}\r\n\t\t},\r\n\t\tfont: {\r\n\t\t\tfamily: 'Poppins',\r\n\t\t\tsize: '18px'\r\n\t\t}\r\n\t}\r\n};\r\n\r\nclass App extends Component {\r\n\tconstructor() {\r\n\t\t\r\n\t}\r\n\r\n\tstate = {\r\n\t\tarraySize: 50,\r\n\t\tsortingAlgorithm: 'Heap Sort',\r\n\t\tarrayValues: [],\r\n\t\tsorting: false\r\n\t};\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.generateNewArray();\r\n\t}\r\n\r\n\tupdateArraySize = e => {\r\n\t\tthis.setState({ arraySize: e.target.value }, () =>\r\n\t\t\tthis.generateNewArray()\r\n\t\t);\r\n\t};\r\n\r\n\tupdateSortingAlgorithm = e => {\r\n\t\tthis.setState({ sortingAlgorithm: e.target.innerText });\r\n\t};\r\n\r\n\tgenerateNewArray = () => {\r\n\t\tlet arrayValues = [],\r\n\t\t\tbars = document.getElementsByClassName('array-bar');\r\n\t\tfor (let i = 0; i < this.state.arraySize; i++) {\r\n\t\t\tarrayValues.push(\r\n\t\t\t\t100 + 5 * Math.floor(Math.random() * Math.floor(100))\r\n\t\t\t);\r\n\t\t\tif (bars[i] !== undefined) {\r\n\t\t\t\tbars[i].style.backgroundColor = '#B578E8';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.setState({\r\n\t\t\tarrayValues: arrayValues\r\n\t\t});\r\n\t};\r\n\r\n\t// HEAP SORT ALGORITHM\r\n\r\n\theapify = (arr, len, i, animation) => {\r\n\t\tlet largest = i;\r\n\t\tlet left = i * 2 + 1;\r\n\t\tlet right = left + 1;\r\n\r\n\t\tif (left < len) {\r\n\t\t\t// comparison add\r\n\t\t\tanimation.push(['#FF4040', largest, 'c']);\r\n\t\t\tanimation.push(['#FF4040', left, 'c']);\r\n\t\t\tif (arr[left] > arr[largest]) {\r\n\t\t\t\t// comparison success\r\n\t\t\t\tanimation.push(['#6FFFB0', largest, 'c']);\r\n\t\t\t\tanimation.push(['#6FFFB0', left, 'c']);\r\n\t\t\t\t// comparison success remove\r\n\t\t\t\tanimation.push(['#B578E8', largest, 'c']);\r\n\t\t\t\tanimation.push(['#B578E8', left, 'c']);\r\n\t\t\t\tlargest = left;\r\n\t\t\t}\r\n\t\t\t// comparison remove\r\n\t\t\tanimation.push(['#B578E8', largest, 'c']);\r\n\t\t\tanimation.push(['#B578E8', left, 'c']);\r\n\t\t}\r\n\r\n\t\tif (right < len) {\r\n\t\t\t// comparison add\r\n\t\t\tanimation.push(['#FF4040', largest, 'c']);\r\n\t\t\tanimation.push(['#FF4040', right, 'c']);\r\n\t\t\tif (arr[right] > arr[largest]) {\r\n\t\t\t\t// comparison success\r\n\t\t\t\tanimation.push(['#6FFFB0', largest, 'c']);\r\n\t\t\t\tanimation.push(['#6FFFB0', right, 'c']);\r\n\t\t\t\t// comparison success remove\r\n\t\t\t\tanimation.push(['#B578E8', largest, 'c']);\r\n\t\t\t\tanimation.push(['#B578E8', right, 'c']);\r\n\t\t\t\tlargest = right;\r\n\t\t\t}\r\n\t\t\t// comparison remove\r\n\t\t\tanimation.push(['#B578E8', largest, 'c']);\r\n\t\t\tanimation.push(['#B578E8', right, 'c']);\r\n\t\t}\r\n\r\n\t\tif (largest !== i) {\r\n\t\t\t// swap\r\n\t\t\tthis.swap(arr, i, largest, animation);\r\n\t\t\tthis.heapify(arr, len, largest, animation);\r\n\t\t}\r\n\r\n\t\treturn arr;\r\n\t};\r\n\r\n\theapSort = (arr, animation) => {\r\n\t\tlet len = arr.length;\r\n\t\tlet i = Math.floor(len / 2 - 1);\r\n\t\tlet k = len - 1;\r\n\r\n\t\twhile (i >= 0) {\r\n\t\t\tthis.heapify(arr, len, i, animation);\r\n\t\t\ti--;\r\n\t\t}\r\n\r\n\t\twhile (k >= 0) {\r\n\t\t\t//swap\r\n\t\t\tthis.swap(arr, 0, k, animation);\r\n\t\t\tanimation.push(['#6399F1', k, 'c']);\r\n\t\t\tthis.heapify(arr, k, 0, animation);\r\n\t\t\tk--;\r\n\t\t}\r\n\r\n\t\treturn arr;\r\n\t};\r\n\r\n\t// MERGE SORT ALGORITHM\r\n\r\n\tmerge = (\r\n\t\tmainArray,\r\n\t\tstartIdx,\r\n\t\tmiddleIdx,\r\n\t\tendIdx,\r\n\t\tauxiliaryArray,\r\n\t\tanimation\r\n\t) => {\r\n\t\tlet k = startIdx;\r\n\t\tlet i = startIdx;\r\n\t\tlet j = middleIdx + 1;\r\n\t\twhile (i <= middleIdx && j <= endIdx) {\r\n\t\t\t//comparison add\r\n\t\t\tanimation.push(['#FF4040', i, 'c']);\r\n\t\t\tanimation.push(['#FF4040', j, 'c']);\r\n\r\n\t\t\tif (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n\t\t\t\t//comparison success\r\n\t\t\t\tanimation.push(['#6FFFB0', i, 'c']);\r\n\t\t\t\tanimation.push(['#6FFFB0', j, 'c']);\r\n\t\t\t\t// comparison remove\r\n\t\t\t\tanimation.push(['#B578E8', i, 'c']);\r\n\t\t\t\tanimation.push(['#B578E8', j, 'c']);\r\n\t\t\t\t// animate swap\r\n\t\t\t\tanimation.push([auxiliaryArray[i], k, 'cV']);\r\n\t\t\t\tmainArray[k++] = auxiliaryArray[i++];\r\n\t\t\t} else {\r\n\t\t\t\t// comparison remove\r\n\t\t\t\tanimation.push(['#B578E8', i, 'c']);\r\n\t\t\t\tanimation.push(['#B578E8', j, 'c']);\r\n\t\t\t\t// animate swap\r\n\t\t\t\tanimation.push([auxiliaryArray[j], k, 'cV']);\r\n\t\t\t\tmainArray[k++] = auxiliaryArray[j++];\r\n\t\t\t}\r\n\t\t}\r\n\t\twhile (i <= middleIdx) {\r\n\t\t\t//comparison add\r\n\t\t\tanimation.push(['#FF4040', i, 'c']);\r\n\t\t\t// comparison remove\r\n\t\t\tanimation.push(['#B578E8', i, 'c']);\r\n\t\t\t// animate swap\r\n\t\t\tanimation.push([auxiliaryArray[i], k, 'cV']);\r\n\t\t\tmainArray[k++] = auxiliaryArray[i++];\r\n\t\t}\r\n\t\twhile (j <= endIdx) {\r\n\t\t\t//comparison add\r\n\t\t\tanimation.push(['#FF4040', j, 'c']);\r\n\t\t\t// comparison remove\r\n\t\t\tanimation.push(['#B578E8', j, 'c']);\r\n\t\t\t// animate swap\r\n\t\t\tanimation.push([auxiliaryArray[j], k, 'cV']);\r\n\t\t\tmainArray[k++] = auxiliaryArray[j++];\r\n\t\t}\r\n\t};\r\n\r\n\tmergeSort = (mainArray, startIdx, endIdx, auxiliaryArray, animation) => {\r\n\t\tif (startIdx === endIdx) return;\r\n\t\tconst middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n\t\tthis.mergeSort(\r\n\t\t\tauxiliaryArray,\r\n\t\t\tstartIdx,\r\n\t\t\tmiddleIdx,\r\n\t\t\tmainArray,\r\n\t\t\tanimation\r\n\t\t);\r\n\t\tthis.mergeSort(\r\n\t\t\tauxiliaryArray,\r\n\t\t\tmiddleIdx + 1,\r\n\t\t\tendIdx,\r\n\t\t\tmainArray,\r\n\t\t\tanimation\r\n\t\t);\r\n\t\tthis.merge(\r\n\t\t\tmainArray,\r\n\t\t\tstartIdx,\r\n\t\t\tmiddleIdx,\r\n\t\t\tendIdx,\r\n\t\t\tauxiliaryArray,\r\n\t\t\tanimation\r\n\t\t);\r\n\t};\r\n\r\n\t// QUICK SORT ALGORITHM\r\n\r\n\tswap = (arr, i, j, animation) => {\r\n\t\tconst temp = arr[i];\r\n\t\t// animate swap\r\n\t\tanimation.push([arr[j], i, 'cV']);\r\n\t\tanimation.push([temp, j, 'cV']);\r\n\t\tarr[i] = arr[j];\r\n\t\tarr[j] = temp;\r\n\t};\r\n\r\n\tpartition = (arr, pivot, left, right, animation) => {\r\n\t\tlet pivotValue = arr[pivot],\r\n\t\t\tpartitionIndex = left;\r\n\t\t// add pivot\r\n\t\tanimation.push(['#FF4040', pivot, 'c']);\r\n\t\tfor (let i = left; i < right; i++) {\r\n\t\t\t// add partition index\r\n\t\t\tanimation.push(['#FFAA15', partitionIndex, 'c']);\r\n\t\t\t// add comparison\r\n\t\t\tanimation.push(['#FF4040', i, 'c']);\r\n\t\t\tif (arr[i] < pivotValue) {\r\n\t\t\t\t// comparison success\r\n\t\t\t\tanimation.push(['#6FFFB0', i, 'c']);\r\n\t\t\t\t// remove comparison success\r\n\t\t\t\tanimation.push(['#B578E8', i, 'c']);\r\n\t\t\t\tthis.swap(arr, i, partitionIndex, animation);\r\n\t\t\t\t// remove old partition index\r\n\t\t\t\tanimation.push(['#B578E8', partitionIndex, 'c']);\r\n\t\t\t\tpartitionIndex++;\r\n\t\t\t\t// add new partition index\r\n\t\t\t\tanimation.push(['#FFAA15', partitionIndex, 'c']);\r\n\t\t\t}\r\n\t\t\t// remove comparison\r\n\t\t\tanimation.push(['#B578E8', i, 'c']);\r\n\t\t}\r\n\t\t// remove partition index\r\n\t\tanimation.push(['#B578E8', partitionIndex, 'c']);\r\n\t\tthis.swap(arr, right, partitionIndex, animation);\r\n\t\t// remove pivot\r\n\t\tanimation.push(['#B578E8', pivot, 'c']);\r\n\t\treturn partitionIndex;\r\n\t};\r\n\r\n\tquickSort = (arr, left, right, animation) => {\r\n\t\tlet pivot, partitionIndex;\r\n\r\n\t\tif (left < right) {\r\n\t\t\tpivot = right;\r\n\t\t\tpartitionIndex = this.partition(arr, pivot, left, right, animation);\r\n\r\n\t\t\t//sort left and right\r\n\t\t\tthis.quickSort(arr, left, partitionIndex - 1, animation);\r\n\t\t\tthis.quickSort(arr, partitionIndex + 1, right, animation);\r\n\t\t}\r\n\r\n\t\treturn arr;\r\n\t};\r\n\r\n\t// ANIMATE SORTING\r\n\r\n\tanimateSorting = animation => {\r\n\t\tfor (let i = 0; i < animation.length; i++) {\r\n\t\t\tconst [value, barId, animationType] = animation[i],\r\n\t\t\t\tbarStyle = document.getElementsByClassName('array-bar')[barId]\r\n\t\t\t\t\t.style,\r\n\t\t\t\tisLastIteration = i === animation.length - 1 ? true : false;\r\n\t\t\tif (animationType === 'c') {\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tbarStyle.backgroundColor = value;\r\n\t\t\t\t}, i * ANIMATION_SPEED_MS);\r\n\t\t\t} else if (animationType === 'cV') {\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tbarStyle.height = `${value}px`;\r\n\t\t\t\t}, i * ANIMATION_SPEED_MS);\r\n\t\t\t}\r\n\r\n\t\t\tif (isLastIteration) {\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tthis.setState({ sorting: false });\r\n\t\t\t\t}, i * ANIMATION_SPEED_MS);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tstartSorting = () => {\r\n\t\tthis.setState({ sorting: true });\r\n\t\tlet arr = this.state.arrayValues.map(a => a),\r\n\t\t\tsortedArr = arr.slice().sort((a, b) => a - b),\r\n\t\t\tanimation = [];\r\n\r\n\t\tif (this.state.sortingAlgorithm === 'Quick Sort') {\r\n\t\t\tthis.quickSort(arr, 0, arr.length - 1, animation);\r\n\t\t} else if (this.state.sortingAlgorithm === 'Merge Sort') {\r\n\t\t\tlet auxiliaryArray = arr.slice();\r\n\t\t\tthis.mergeSort(arr, 0, arr.length - 1, auxiliaryArray, animation);\r\n\t\t} else if (this.state.sortingAlgorithm === 'Heap Sort') {\r\n\t\t\tthis.heapSort(arr, animation);\r\n\t\t}\r\n\r\n\t\tarr.forEach((value, id) => {\r\n\t\t\tif (sortedArr[id] === value) {\r\n\t\t\t\tanimation.push(['#6399F1', id, 'c']);\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.animateSorting(animation);\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Grommet theme={theme}>\r\n\t\t\t\t<Header\r\n\t\t\t\t\tupdateArraySize={this.updateArraySize}\r\n\t\t\t\t\tupdateSortingAlgorithm={this.updateSortingAlgorithm}\r\n\t\t\t\t\tarraySize={this.state.arraySize}\r\n\t\t\t\t\tsortingAlgorithm={this.state.sortingAlgorithm}\r\n\t\t\t\t\tgenerateNewArray={this.generateNewArray}\r\n\t\t\t\t\tstartSorting={this.startSorting}\r\n\t\t\t\t\tsorting={this.state.sorting}\r\n\t\t\t\t/>\r\n\t\t\t\t<Box\r\n\t\t\t\t\tjustify=\"center\"\r\n\t\t\t\t\tmargin={{ horizontal: 'xlarge', top: 'medium' }}\r\n\t\t\t\t\tdirection=\"row\"\r\n\t\t\t\t\t//align=\"center\"\r\n\t\t\t\t>\r\n\t\t\t\t\t{this.state.arrayValues.map((value, position) => (\r\n\t\t\t\t\t\t<Box\r\n\t\t\t\t\t\t\tkey={position}\r\n\t\t\t\t\t\t\twidth=\"3px\"\r\n\t\t\t\t\t\t\tmargin=\"1.5px\"\r\n\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\theight: `${value}px`\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\tresponsive={false}\r\n\t\t\t\t\t\t\tbackground=\"accent-1\"\r\n\t\t\t\t\t\t\tclassName=\"array-bar\"\r\n\t\t\t\t\t\t></Box>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</Box>\r\n\t\t\t</Grommet>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}