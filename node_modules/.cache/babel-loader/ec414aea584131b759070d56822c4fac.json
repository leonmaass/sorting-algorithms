{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Work\\\\Desktop\\\\Coden\\\\sorting-algorithms\\\\src\\\\components\\\\App\\\\App.jsx\";\nimport React, { Component } from 'react';\nimport { Box, Grommet } from 'grommet';\nimport Header from './Header';\nconst theme = {\n  global: {\n    colors: {\n      brand: '#061533',\n      focus: 'transparent',\n      'accent-1': '#B578E8',\n      text: {\n        light: '#000'\n      }\n    },\n    font: {\n      family: 'Poppins',\n      size: '18px'\n    }\n  }\n};\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      arraySize: 100,\n      sortingAlgorithm: 'Quick Sort',\n      arrayValues: [24, 63, 13, 94, 78],\n      sorting: false\n    };\n\n    this.updateArraySize = e => {\n      this.setState({\n        arraySize: e.target.value\n      });\n    };\n\n    this.updateSortingAlgorithm = e => {\n      this.setState({\n        sortingAlgorithm: e.target.innerText\n      });\n    };\n\n    this.generateNewArray = () => {\n      const arrayValues = [];\n\n      for (let i = 0; i < this.state.arraySize; i++) {\n        arrayValues.push(100 + 5 * Math.floor(Math.random() * Math.floor(100)));\n      }\n\n      this.setState({\n        arrayValues: arrayValues\n      });\n    };\n\n    this.swap = (arr, i, j) => {\n      const temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n    };\n\n    this.partition = (arr, pivot, left, right, animation) => {\n      let pivotValue = arr[pivot],\n          partitionIndex = left; // add pivot\n\n      animation.push(['#FF4040', pivot, 'c']);\n\n      for (let i = left; i < right; i++) {\n        // add partition index\n        animation.push(['#FFAA15', partitionIndex, 'c']); // add comparison\n\n        animation.push(['#FF4040', i, 'c']);\n\n        if (arr[i] < pivotValue) {\n          // comparison success\n          animation.push(['#6FFFB0', i, 'c']); // ? swap\n\n          animation.push([i, partitionIndex, 's']);\n          this.swap(arr, i, partitionIndex); // remove old partition index\n\n          animation.push(['#B578E8', partitionIndex, 'c']);\n          partitionIndex++; // add new partition index\n\n          animation.push(['#FFAA15', partitionIndex, 'c']);\n        } // remove comparison\n\n\n        animation.push(['#B578E8', i, 'c']);\n      } // remove partition index\n\n\n      animation.push(['#B578E8', partitionIndex, 'c']); // ? swap\n\n      animation.push([right, partitionIndex, 's']);\n      this.swap(arr, right, partitionIndex); // remove pivot\n\n      animation.push(['#B578E8', pivot, 'c']);\n      return partitionIndex;\n    };\n\n    this.quickSort = (arr, left, right, animation) => {\n      let pivot, partitionIndex;\n\n      if (left < right) {\n        pivot = right;\n        partitionIndex = this.partition(arr, pivot, left, right, animation); //sort left and right\n\n        this.quickSort(arr, left, partitionIndex - 1, animation);\n        this.quickSort(arr, partitionIndex + 1, right, animation);\n      }\n\n      return arr;\n    };\n\n    this.startSorting = () => {\n      this.setState({\n        sorting: true\n      });\n      var arr = this.state.arrayValues.map(a => {\n        return a;\n      });\n\n      if (this.state.sortingAlgorithm === 'Quick Sort') {\n        var animation = [];\n        this.quickSort(arr, 0, arr.length - 1, animation);\n        console.log(animation);\n\n        for (let i = 0; i < animation.length; i++) {\n          const arrayBars = document.getElementsByClassName('array-bar');\n          const isColorChange = animation[i][2] === \"c\" ? true : false;\n\n          if (isColorChange) {\n            let barStyle = arrayBars[animation[i][1]].style;\n            const color = animation[i][0];\n            setTimeout(() => {\n              barStyle.backgroundColor = color;\n            }, i * 10);\n          } else {//setTimeout(() => {\n            //const [barOneIdx, newHeight] = animation[i];\n            //const barOneStyle = arrayBars[barOneIdx].style;\n            //barOneStyle.height = `${newHeight}px`;\n            //}, i * ANIMATION_SPEED_MS);\n          }\n        }\n      }\n\n      this.setState({\n        sorting: false\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.generateNewArray();\n  }\n\n  render() {\n    return React.createElement(Grommet, {\n      theme: theme,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(Header, {\n      updateArraySize: this.updateArraySize,\n      updateSortingAlgorithm: this.updateSortingAlgorithm,\n      arraySize: this.state.arraySize,\n      sortingAlgorithm: this.state.sortingAlgorithm,\n      generateNewArray: this.generateNewArray,\n      startSorting: this.startSorting,\n      sorting: this.state.sorting,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }), React.createElement(Box, {\n      justify: \"center\",\n      margin: {\n        horizontal: 'xlarge'\n      },\n      direction: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, this.state.arrayValues.map((value, position) => React.createElement(Box, {\n      key: position,\n      width: \"3px\",\n      height: value + 'px',\n      margin: \"1px\",\n      background: \"accent-1\",\n      className: \"array-bar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\Work\\Desktop\\Coden\\sorting-algorithms\\src\\components\\App\\App.jsx"],"names":["React","Component","Box","Grommet","Header","theme","global","colors","brand","focus","text","light","font","family","size","App","state","arraySize","sortingAlgorithm","arrayValues","sorting","updateArraySize","e","setState","target","value","updateSortingAlgorithm","innerText","generateNewArray","i","push","Math","floor","random","swap","arr","j","temp","partition","pivot","left","right","animation","pivotValue","partitionIndex","quickSort","startSorting","map","a","length","console","log","arrayBars","document","getElementsByClassName","isColorChange","barStyle","style","color","setTimeout","backgroundColor","componentDidMount","render","horizontal","position"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Box, Grommet } from 'grommet';\r\nimport Header from './Header';\r\nconst theme = {\r\n\tglobal: {\r\n\t\tcolors: {\r\n\t\t\tbrand: '#061533',\r\n\t\t\tfocus: 'transparent',\r\n\t\t\t'accent-1': '#B578E8',\r\n\t\t\ttext: {\r\n\t\t\t\tlight: '#000'\r\n\t\t\t}\r\n\t\t},\r\n\t\tfont: {\r\n\t\t\tfamily: 'Poppins',\r\n\t\t\tsize: '18px'\r\n\t\t}\r\n\t}\r\n};\r\n\r\nclass App extends Component {\r\n\tstate = {\r\n\t\tarraySize: 100,\r\n\t\tsortingAlgorithm: 'Quick Sort',\r\n\t\tarrayValues: [24, 63, 13, 94, 78],\r\n\t\tsorting: false\r\n\t};\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.generateNewArray();\r\n\t}\r\n\r\n\tupdateArraySize = e => {\r\n\t\tthis.setState({ arraySize: e.target.value });\r\n\t};\r\n\r\n\tupdateSortingAlgorithm = e => {\r\n\t\tthis.setState({ sortingAlgorithm: e.target.innerText });\r\n\t};\r\n\r\n\tgenerateNewArray = () => {\r\n\t\tconst arrayValues = [];\r\n\t\tfor (let i = 0; i < this.state.arraySize; i++) {\r\n\t\t\tarrayValues.push(\r\n\t\t\t\t100 + 5 * Math.floor(Math.random() * Math.floor(100))\r\n\t\t\t);\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\tarrayValues: arrayValues\r\n\t\t});\r\n\t};\r\n\r\n\tswap = (arr, i, j) => {\r\n\t\tconst temp = arr[i];\r\n\t\tarr[i] = arr[j];\r\n\t\tarr[j] = temp;\r\n\t};\r\n\r\n\tpartition = (arr, pivot, left, right, animation) => {\r\n\t\tlet pivotValue = arr[pivot],\r\n\t\t\tpartitionIndex = left;\r\n\t\t\t// add pivot\r\n\t\t\tanimation.push(['#FF4040', pivot, 'c']);\r\n\t\tfor (let i = left; i < right; i++) {\r\n\t\t\t// add partition index\r\n\t\t\tanimation.push(['#FFAA15', partitionIndex, 'c']);\r\n\t\t\t// add comparison\r\n\t\t\tanimation.push(['#FF4040', i, 'c']);\r\n\t\t\tif (arr[i] < pivotValue) {\r\n\t\t\t\t// comparison success\r\n\t\t\t\tanimation.push(['#6FFFB0', i, 'c']);\r\n\t\t\t\t// ? swap\r\n\t\t\t\tanimation.push([i, partitionIndex, 's']);\r\n\t\t\t\tthis.swap(arr, i, partitionIndex);\r\n\t\t\t\t// remove old partition index\r\n\t\t\t\tanimation.push(['#B578E8', partitionIndex, 'c']);\r\n\t\t\t\tpartitionIndex++;\r\n\t\t\t\t// add new partition index\r\n\t\t\t\tanimation.push(['#FFAA15', partitionIndex, 'c']);\r\n\t\t\t}\r\n\t\t\t// remove comparison\r\n\t\t\tanimation.push(['#B578E8', i, 'c']);\r\n\t\t}\r\n\t\t// remove partition index\r\n\t\tanimation.push(['#B578E8', partitionIndex, 'c']);\r\n\t\t// ? swap\r\n\t\tanimation.push([right, partitionIndex, 's']);\r\n\t\tthis.swap(arr, right, partitionIndex);\r\n\t\t// remove pivot\r\n\t\tanimation.push(['#B578E8', pivot, 'c']);\r\n\t\treturn partitionIndex;\r\n\t};\r\n\r\n\tquickSort = (arr, left, right, animation) => {\r\n\t\tlet pivot, partitionIndex;\r\n\r\n\t\tif (left < right) {\r\n\t\t\tpivot = right;\r\n\t\t\tpartitionIndex = this.partition(arr, pivot, left, right, animation);\r\n\r\n\t\t\t//sort left and right\r\n\t\t\tthis.quickSort(arr, left, partitionIndex - 1, animation);\r\n\t\t\tthis.quickSort(arr, partitionIndex + 1, right, animation);\r\n\t\t}\r\n\r\n\t\treturn arr;\r\n\t};\r\n\r\n\tstartSorting = () => {\r\n\t\tthis.setState({ sorting: true });\r\n\t\tvar arr = this.state.arrayValues.map((a) => {return a});\r\n\t\tif (this.state.sortingAlgorithm === 'Quick Sort') {\r\n\t\t\tvar animation = [];\r\n\t\t\tthis.quickSort(arr, 0, arr.length - 1, animation);\r\n\t\t\tconsole.log(animation);\r\n\t\t\tfor (let i = 0; i < animation.length; i++) {\r\n\t\t\t\tconst arrayBars = document.getElementsByClassName('array-bar');\r\n\t\t\t\tconst isColorChange = animation[i][2] === \"c\" ? true : false;\r\n\t\t\t\tif (isColorChange) {\r\n\t\t\t\t\tlet barStyle = arrayBars[animation[i][1]].style;\r\n\t\t\t\t\tconst color = animation[i][0];\r\n\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\tbarStyle.backgroundColor = color;\r\n\t\t\t\t  \t}, i * 10);\r\n\t\t\t\t} else {\r\n\t\t\t\t  //setTimeout(() => {\r\n\t\t\t\t\t//const [barOneIdx, newHeight] = animation[i];\r\n\t\t\t\t\t//const barOneStyle = arrayBars[barOneIdx].style;\r\n\t\t\t\t\t//barOneStyle.height = `${newHeight}px`;\r\n\t\t\t\t  //}, i * ANIMATION_SPEED_MS);\r\n\t\t\t\t}\r\n\t\t\t  }\r\n\r\n\r\n\r\n\t\t}\r\n\t\tthis.setState({ sorting: false });\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Grommet theme={theme}>\r\n\t\t\t\t<Header\r\n\t\t\t\t\tupdateArraySize={this.updateArraySize}\r\n\t\t\t\t\tupdateSortingAlgorithm={this.updateSortingAlgorithm}\r\n\t\t\t\t\tarraySize={this.state.arraySize}\r\n\t\t\t\t\tsortingAlgorithm={this.state.sortingAlgorithm}\r\n\t\t\t\t\tgenerateNewArray={this.generateNewArray}\r\n\t\t\t\t\tstartSorting={this.startSorting}\r\n\t\t\t\t\tsorting={this.state.sorting}\r\n\t\t\t\t/>\r\n\t\t\t\t<Box\r\n\t\t\t\t\tjustify=\"center\"\r\n\t\t\t\t\tmargin={{ horizontal: 'xlarge' }}\r\n\t\t\t\t\tdirection=\"row\"\r\n\t\t\t\t>\r\n\t\t\t\t\t{this.state.arrayValues.map((value, position) => (\r\n\t\t\t\t\t\t<Box\r\n\t\t\t\t\t\t\tkey={position}\r\n\t\t\t\t\t\t\twidth=\"3px\"\r\n\t\t\t\t\t\t\theight={value + 'px'}\r\n\t\t\t\t\t\t\tmargin=\"1px\"\r\n\t\t\t\t\t\t\tbackground=\"accent-1\"\r\n\t\t\t\t\t\t\tclassName=\"array-bar\"\r\n\t\t\t\t\t\t></Box>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</Box>\r\n\t\t\t</Grommet>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}