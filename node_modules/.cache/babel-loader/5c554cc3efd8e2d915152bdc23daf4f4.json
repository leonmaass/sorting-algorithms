{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Work\\\\Desktop\\\\Coden\\\\sorting-algorithms\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Work\\\\Desktop\\\\Coden\\\\sorting-algorithms\\\\src\\\\components\\\\App\\\\App.jsx\";\nimport React, { Component } from 'react';\nimport { Box, Grommet } from 'grommet';\nimport Header from './Header'; // change this value for the speed of the animation\n\nconst ANIMATION_SPEED_MS = 1;\nconst theme = {\n  global: {\n    colors: {\n      brand: '#061533',\n      focus: 'transparent',\n      'accent-1': '#B578E8',\n      text: {\n        light: '#000'\n      }\n    },\n    font: {\n      family: 'Poppins',\n      size: '18px'\n    }\n  }\n};\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      arraySize: 100,\n      sortingAlgorithm: 'Quick Sort',\n      arrayValues: [24, 63, 13, 94, 78],\n      sorting: false\n    };\n\n    this.updateArraySize = e => {\n      this.setState({\n        arraySize: e.target.value\n      });\n    };\n\n    this.updateSortingAlgorithm = e => {\n      this.setState({\n        sortingAlgorithm: e.target.innerText\n      });\n    };\n\n    this.generateNewArray = () => {\n      const arrayValues = [];\n\n      for (let i = 0; i < this.state.arraySize; i++) {\n        arrayValues.push(100 + 5 * Math.floor(Math.random() * Math.floor(100)));\n      }\n\n      this.setState({\n        arrayValues: arrayValues\n      });\n    };\n\n    this.swap = (arr, i, j, animation) => {\n      const temp = arr[i];\n      animation.push([i, j, 's']);\n      arr[i] = arr[j];\n      arr[j] = temp;\n    };\n\n    this.partition = (arr, pivot, left, right, animation) => {\n      let pivotValue = arr[pivot],\n          partitionIndex = left; // add pivot\n\n      animation.push(['#FF4040', pivot, 'c']);\n\n      for (let i = left; i < right; i++) {\n        // add partition index\n        animation.push(['#FFAA15', partitionIndex, 'c']); // add comparison\n\n        animation.push(['#FF4040', i, 'c']);\n\n        if (arr[i] < pivotValue) {\n          // comparison success\n          animation.push(['#6FFFB0', i, 'c']); // remove comparison success\n\n          animation.push(['#B578E8', i, 'c']);\n          this.swap(arr, i, partitionIndex, animation); // remove old partition index\n\n          animation.push(['#B578E8', partitionIndex, 'c']);\n          partitionIndex++; // add new partition index\n\n          animation.push(['#FFAA15', partitionIndex, 'c']);\n        } // remove comparison\n\n\n        animation.push(['#B578E8', i, 'c']);\n      } // remove partition index\n\n\n      animation.push(['#B578E8', partitionIndex, 'c']);\n      this.swap(arr, right, partitionIndex, animation); // remove pivot\n\n      animation.push(['#B578E8', pivot, 'c']);\n      return partitionIndex;\n    };\n\n    this.quickSort = (arr, left, right, animation) => {\n      let pivot, partitionIndex;\n\n      if (left < right) {\n        pivot = right;\n        partitionIndex = this.partition(arr, pivot, left, right, animation); //sort left and right\n\n        this.quickSort(arr, left, partitionIndex - 1, animation);\n        this.quickSort(arr, partitionIndex + 1, right, animation);\n      }\n\n      return arr;\n    };\n\n    this.animateSorting = animation => {\n      for (let i = 0; i < animation.length; i++) {\n        const _animation$i = _slicedToArray(animation[i], 3),\n              i = _animation$i[0],\n              j = _animation$i[1],\n              animationType = _animation$i[2],\n              isColorChange = animationType === 'c' ? true : false,\n              isSwap = animationType === 's' ? true : false,\n              isLastIteration = i === animation.length - 1 ? true : false,\n              barStyle = document.getElementsByClassName('array-bar')[j].style;\n\n        if (isColorChange) {\n          setTimeout(() => {\n            barStyle.backgroundColor = i;\n          }, i * ANIMATION_SPEED_MS);\n        } else if (isSwap) {\n          setTimeout(() => {\n            let arr = this.state.arrayValues.map(a => a);\n            const temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            this.setState({\n              arrayValues: arr\n            }); //barStyle.height = `${value}px`;\n          }, i * ANIMATION_SPEED_MS);\n        }\n\n        if (isLastIteration) {\n          setTimeout(() => {\n            this.setState({\n              sorting: false\n            });\n          }, i * ANIMATION_SPEED_MS);\n        }\n      }\n    };\n\n    this.startSorting = () => {\n      this.setState({\n        sorting: true\n      });\n      let arr = this.state.arrayValues.map(a => a);\n\n      if (this.state.sortingAlgorithm === 'Quick Sort') {\n        let animation = [];\n        this.quickSort(arr, 0, arr.length - 1, animation);\n        this.animateSorting(animation);\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.generateNewArray();\n  }\n\n  render() {\n    return React.createElement(Grommet, {\n      theme: theme,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(Header, {\n      updateArraySize: this.updateArraySize,\n      updateSortingAlgorithm: this.updateSortingAlgorithm,\n      arraySize: this.state.arraySize,\n      sortingAlgorithm: this.state.sortingAlgorithm,\n      generateNewArray: this.generateNewArray,\n      startSorting: this.startSorting,\n      sorting: this.state.sorting,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }), React.createElement(Box, {\n      justify: \"center\",\n      margin: {\n        horizontal: 'xlarge'\n      },\n      direction: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, this.state.arrayValues.map((value, position) => React.createElement(Box, {\n      key: position,\n      width: \"3px\",\n      height: value + 'px',\n      margin: \"1px\",\n      background: \"accent-1\",\n      className: \"array-bar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\Work\\Desktop\\Coden\\sorting-algorithms\\src\\components\\App\\App.jsx"],"names":["React","Component","Box","Grommet","Header","ANIMATION_SPEED_MS","theme","global","colors","brand","focus","text","light","font","family","size","App","state","arraySize","sortingAlgorithm","arrayValues","sorting","updateArraySize","e","setState","target","value","updateSortingAlgorithm","innerText","generateNewArray","i","push","Math","floor","random","swap","arr","j","animation","temp","partition","pivot","left","right","pivotValue","partitionIndex","quickSort","animateSorting","length","animationType","isColorChange","isSwap","isLastIteration","barStyle","document","getElementsByClassName","style","setTimeout","backgroundColor","map","a","startSorting","componentDidMount","render","horizontal","position"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Box, Grommet } from 'grommet';\r\nimport Header from './Header';\r\n\r\n// change this value for the speed of the animation\r\nconst ANIMATION_SPEED_MS = 1;\r\n\r\nconst theme = {\r\n\tglobal: {\r\n\t\tcolors: {\r\n\t\t\tbrand: '#061533',\r\n\t\t\tfocus: 'transparent',\r\n\t\t\t'accent-1': '#B578E8',\r\n\t\t\ttext: {\r\n\t\t\t\tlight: '#000'\r\n\t\t\t}\r\n\t\t},\r\n\t\tfont: {\r\n\t\t\tfamily: 'Poppins',\r\n\t\t\tsize: '18px'\r\n\t\t}\r\n\t}\r\n};\r\n\r\nclass App extends Component {\r\n\tstate = {\r\n\t\tarraySize: 100,\r\n\t\tsortingAlgorithm: 'Quick Sort',\r\n\t\tarrayValues: [24, 63, 13, 94, 78],\r\n\t\tsorting: false\r\n\t};\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.generateNewArray();\r\n\t}\r\n\r\n\tupdateArraySize = e => {\r\n\t\tthis.setState({ arraySize: e.target.value });\r\n\t};\r\n\r\n\tupdateSortingAlgorithm = e => {\r\n\t\tthis.setState({ sortingAlgorithm: e.target.innerText });\r\n\t};\r\n\r\n\tgenerateNewArray = () => {\r\n\t\tconst arrayValues = [];\r\n\t\tfor (let i = 0; i < this.state.arraySize; i++) {\r\n\t\t\tarrayValues.push(\r\n\t\t\t\t100 + 5 * Math.floor(Math.random() * Math.floor(100))\r\n\t\t\t);\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\tarrayValues: arrayValues\r\n\t\t});\r\n\t};\r\n\r\n\tswap = (arr, i, j, animation) => {\r\n\t\tconst temp = arr[i];\r\n\t\tanimation.push([i, j, 's']);\r\n\t\tarr[i] = arr[j];\r\n\t\tarr[j] = temp;\r\n\t};\r\n\r\n\tpartition = (arr, pivot, left, right, animation) => {\r\n\t\tlet pivotValue = arr[pivot],\r\n\t\t\tpartitionIndex = left;\r\n\t\t// add pivot\r\n\t\tanimation.push(['#FF4040', pivot, 'c']);\r\n\t\tfor (let i = left; i < right; i++) {\r\n\t\t\t// add partition index\r\n\t\t\tanimation.push(['#FFAA15', partitionIndex, 'c']);\r\n\t\t\t// add comparison\r\n\t\t\tanimation.push(['#FF4040', i, 'c']);\r\n\t\t\tif (arr[i] < pivotValue) {\r\n\t\t\t\t// comparison success\r\n\t\t\t\tanimation.push(['#6FFFB0', i, 'c']);\r\n\t\t\t\t// remove comparison success\r\n\t\t\t\tanimation.push(['#B578E8', i, 'c']);\r\n\t\t\t\tthis.swap(arr, i, partitionIndex, animation);\r\n\t\t\t\t// remove old partition index\r\n\t\t\t\tanimation.push(['#B578E8', partitionIndex, 'c']);\r\n\t\t\t\tpartitionIndex++;\r\n\t\t\t\t// add new partition index\r\n\t\t\t\tanimation.push(['#FFAA15', partitionIndex, 'c']);\r\n\t\t\t}\r\n\t\t\t// remove comparison\r\n\t\t\tanimation.push(['#B578E8', i, 'c']);\r\n\t\t}\r\n\t\t// remove partition index\r\n\t\tanimation.push(['#B578E8', partitionIndex, 'c']);\r\n\t\tthis.swap(arr, right, partitionIndex, animation);\r\n\t\t// remove pivot\r\n\t\tanimation.push(['#B578E8', pivot, 'c']);\r\n\t\treturn partitionIndex;\r\n\t};\r\n\r\n\tquickSort = (arr, left, right, animation) => {\r\n\t\tlet pivot, partitionIndex;\r\n\r\n\t\tif (left < right) {\r\n\t\t\tpivot = right;\r\n\t\t\tpartitionIndex = this.partition(arr, pivot, left, right, animation);\r\n\r\n\t\t\t//sort left and right\r\n\t\t\tthis.quickSort(arr, left, partitionIndex - 1, animation);\r\n\t\t\tthis.quickSort(arr, partitionIndex + 1, right, animation);\r\n\t\t}\r\n\r\n\t\treturn arr;\r\n\t};\r\n\r\n\tanimateSorting = animation => {\r\n\t\tfor (let i = 0; i < animation.length; i++) {\r\n\t\t\tconst [i, j, animationType] = animation[i],\r\n\t\t\t\tisColorChange = animationType === 'c' ? true : false,\r\n\t\t\t\tisSwap = animationType === 's' ? true : false,\r\n\t\t\t\tisLastIteration = i === animation.length - 1 ? true : false,\r\n\t\t\t\tbarStyle = document.getElementsByClassName('array-bar')[j]\r\n\t\t\t\t\t.style;\r\n\t\t\tif (isColorChange) {\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tbarStyle.backgroundColor = i;\r\n\t\t\t\t}, i * ANIMATION_SPEED_MS);\r\n\t\t\t} else if (isSwap) {\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tlet arr = this.state.arrayValues.map(a => a);\r\n\t\t\t\t\tconst temp = arr[i];\r\n\t\t\t\t\tarr[i] = arr[j];\r\n\t\t\t\t\tarr[j] = temp;\r\n\t\t\t\t\tthis.setState({ arrayValues: arr });\r\n\t\t\t\t\t//barStyle.height = `${value}px`;\r\n\t\t\t\t}, i * ANIMATION_SPEED_MS);\r\n\t\t\t}\r\n\r\n\t\t\tif (isLastIteration) {\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tthis.setState({ sorting: false });\r\n\t\t\t\t}, i * ANIMATION_SPEED_MS);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tstartSorting = () => {\r\n\t\tthis.setState({ sorting: true });\r\n\t\tlet arr = this.state.arrayValues.map(a => a);\r\n\t\tif (this.state.sortingAlgorithm === 'Quick Sort') {\r\n\t\t\tlet animation = [];\r\n\t\t\tthis.quickSort(arr, 0, arr.length - 1, animation);\r\n\t\t\tthis.animateSorting(animation);\r\n\t\t}\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Grommet theme={theme}>\r\n\t\t\t\t<Header\r\n\t\t\t\t\tupdateArraySize={this.updateArraySize}\r\n\t\t\t\t\tupdateSortingAlgorithm={this.updateSortingAlgorithm}\r\n\t\t\t\t\tarraySize={this.state.arraySize}\r\n\t\t\t\t\tsortingAlgorithm={this.state.sortingAlgorithm}\r\n\t\t\t\t\tgenerateNewArray={this.generateNewArray}\r\n\t\t\t\t\tstartSorting={this.startSorting}\r\n\t\t\t\t\tsorting={this.state.sorting}\r\n\t\t\t\t/>\r\n\t\t\t\t<Box\r\n\t\t\t\t\tjustify=\"center\"\r\n\t\t\t\t\tmargin={{ horizontal: 'xlarge' }}\r\n\t\t\t\t\tdirection=\"row\"\r\n\t\t\t\t>\r\n\t\t\t\t\t{this.state.arrayValues.map((value, position) => (\r\n\t\t\t\t\t\t<Box\r\n\t\t\t\t\t\t\tkey={position}\r\n\t\t\t\t\t\t\twidth=\"3px\"\r\n\t\t\t\t\t\t\theight={value + 'px'}\r\n\t\t\t\t\t\t\tmargin=\"1px\"\r\n\t\t\t\t\t\t\tbackground=\"accent-1\"\r\n\t\t\t\t\t\t\tclassName=\"array-bar\"\r\n\t\t\t\t\t\t></Box>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</Box>\r\n\t\t\t</Grommet>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}