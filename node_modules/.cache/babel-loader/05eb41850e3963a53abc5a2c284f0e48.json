{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Work\\\\Desktop\\\\Coden\\\\sorting-algorithms\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Work\\\\Desktop\\\\Coden\\\\sorting-algorithms\\\\src\\\\components\\\\App\\\\App.jsx\";\nimport React, { Component } from 'react';\nimport { Box, Grommet } from 'grommet';\nimport Header from './Header'; // change this value for the speed of the animation\n\nconst ANIMATION_SPEED_MS = 10;\nconst theme = {\n  global: {\n    colors: {\n      brand: '#061533',\n      focus: 'transparent',\n      'accent-1': '#B578E8',\n      text: {\n        light: '#000'\n      }\n    },\n    font: {\n      family: 'Poppins',\n      size: '18px'\n    }\n  }\n};\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      arraySize: 100,\n      sortingAlgorithm: 'Quick Sort',\n      arrayValues: [],\n      arrayColors: [],\n      sorting: false\n    };\n\n    this.updateArraySize = e => {\n      this.setState({\n        arraySize: e.target.value\n      });\n    };\n\n    this.updateSortingAlgorithm = e => {\n      this.setState({\n        sortingAlgorithm: e.target.innerText\n      });\n    };\n\n    this.generateNewArray = () => {\n      let arrayValues = [],\n          bars = document.getElementsByClassName('array-bar');\n\n      for (let i = 0; i < this.state.arraySize; i++) {\n        arrayValues.push(100 + 5 * Math.floor(Math.random() * Math.floor(100)));\n\n        if (bars[i] !== undefined) {\n          bars[i].style.backgroundColor = '#B578E8';\n        }\n      }\n\n      this.setState({\n        arrayValues: arrayValues\n      });\n    };\n\n    this.swap = (arr, i, j, animation) => {\n      const temp = arr[i];\n      animation.push([i, j, 's']);\n      arr[i] = arr[j];\n      arr[j] = temp;\n    };\n\n    this.hasBlueColour = (id, animation) => {\n      let returnValue = false;\n      animation.forEach(element => {\n        if (element[2] === 'c' && element[0] === '#6399F1' && element[1] === id) {\n          returnValue = true;\n          console.log(id);\n        }\n      });\n      return returnValue;\n    };\n\n    this.partition = (arr, pivot, left, right, animation, sortedArr) => {\n      let pivotValue = arr[pivot],\n          partitionIndex = left; // add pivot\n\n      animation.push(['#FF4040', pivot, 'c']);\n\n      for (let i = left; i < right; i++) {\n        // add partition index\n        animation.push(['#FFAA15', partitionIndex, 'c']); // add comparison\n\n        animation.push(['#FF4040', i, 'c']);\n\n        if (arr[i] < pivotValue) {\n          // comparison success\n          animation.push(['#6FFFB0', i, 'c']); // remove comparison success\n\n          animation.push(['#B578E8', i, 'c']);\n          this.swap(arr, i, partitionIndex, animation); // remove old partition index\n\n          animation.push(['#B578E8', partitionIndex, 'c']);\n          partitionIndex++; // add new partition index\n\n          animation.push(['#FFAA15', partitionIndex, 'c']);\n        } // remove comparison\n\n\n        animation.push(['#B578E8', i, 'c']);\n      } // remove partition index\n\n\n      animation.push(['#B578E8', partitionIndex, 'c']);\n      this.swap(arr, right, partitionIndex, animation); // remove pivot\n\n      animation.push(['#B578E8', pivot, 'c']);\n      return partitionIndex;\n    };\n\n    this.quickSort = (arr, left, right, animation) => {\n      let pivot, partitionIndex;\n\n      if (left < right) {\n        pivot = right;\n        partitionIndex = this.partition(arr, pivot, left, right, animation); //sort left and right\n\n        this.quickSort(arr, left, partitionIndex - 1, animation);\n        arr.forEach((value, id) => {\n          if (sortedArr[id] === value && !this.hasBlueColour(id, animation)) {\n            animation.push(['#6399F1', id, 'c']);\n          }\n        });\n        this.quickSort(arr, partitionIndex + 1, right, animation, sortedArr);\n        arr.forEach((value, id) => {\n          if (sortedArr[id] === value && !this.hasBlueColour(id, animation)) {\n            animation.push(['#6399F1', id, 'c']);\n          }\n        });\n      }\n\n      return arr;\n    };\n\n    this.animateSorting = animation => {\n      for (let i = 0; i < animation.length; i++) {\n        const isColorChange = animation[i][2] === 'c' ? true : false,\n              isSwap = animation[i][2] === 's' ? true : false,\n              isLastIteration = i === animation.length - 1 ? true : false;\n\n        if (isColorChange) {\n          const _animation$i = _slicedToArray(animation[i], 2),\n                color = _animation$i[0],\n                barId = _animation$i[1];\n\n          setTimeout(() => {\n            document.getElementsByClassName('array-bar')[barId].style.backgroundColor = color;\n          }, i * ANIMATION_SPEED_MS);\n        } else if (isSwap) {\n          setTimeout(() => {\n            const _animation$i2 = _slicedToArray(animation[i], 2),\n                  a = _animation$i2[0],\n                  b = _animation$i2[1];\n\n            let arr = this.state.arrayValues.map(a => a);\n            const temp = arr[a];\n            arr[a] = arr[b];\n            arr[b] = temp;\n            this.setState({\n              arrayValues: arr\n            });\n          }, i * ANIMATION_SPEED_MS);\n        }\n\n        if (isLastIteration) {\n          setTimeout(() => {\n            this.setState({\n              sorting: false\n            });\n          }, i * ANIMATION_SPEED_MS);\n        }\n      }\n    };\n\n    this.startSorting = () => {\n      this.setState({\n        sorting: true\n      });\n      let arr = this.state.arrayValues.map(a => a);\n      let sortedArr = this.state.arrayValues.map(a => a);\n      let animation = [];\n\n      if (this.state.sortingAlgorithm === 'Quick Sort') {\n        sortedArr.sort((a, b) => a - b);\n        this.quickSort(arr, 0, arr.length - 1, animation);\n      }\n\n      this.animateSorting(animation);\n    };\n  }\n\n  componentDidMount() {\n    this.generateNewArray();\n  }\n\n  render() {\n    return React.createElement(Grommet, {\n      theme: theme,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, React.createElement(Header, {\n      updateArraySize: this.updateArraySize,\n      updateSortingAlgorithm: this.updateSortingAlgorithm,\n      arraySize: this.state.arraySize,\n      sortingAlgorithm: this.state.sortingAlgorithm,\n      generateNewArray: this.generateNewArray,\n      startSorting: this.startSorting,\n      sorting: this.state.sorting,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }), React.createElement(Box, {\n      justify: \"center\",\n      margin: {\n        horizontal: 'xlarge'\n      },\n      direction: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, this.state.arrayValues.map((value, position) => React.createElement(Box, {\n      key: position,\n      width: \"3px\",\n      height: value + 'px',\n      margin: \"1px\",\n      background: \"accent-1\",\n      className: \"array-bar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\Work\\Desktop\\Coden\\sorting-algorithms\\src\\components\\App\\App.jsx"],"names":["React","Component","Box","Grommet","Header","ANIMATION_SPEED_MS","theme","global","colors","brand","focus","text","light","font","family","size","App","state","arraySize","sortingAlgorithm","arrayValues","arrayColors","sorting","updateArraySize","e","setState","target","value","updateSortingAlgorithm","innerText","generateNewArray","bars","document","getElementsByClassName","i","push","Math","floor","random","undefined","style","backgroundColor","swap","arr","j","animation","temp","hasBlueColour","id","returnValue","forEach","element","console","log","partition","pivot","left","right","sortedArr","pivotValue","partitionIndex","quickSort","animateSorting","length","isColorChange","isSwap","isLastIteration","color","barId","setTimeout","a","b","map","startSorting","sort","componentDidMount","render","horizontal","position"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,GAAT,EAAcC,OAAd,QAA6B,SAA7B;AACA,OAAOC,MAAP,MAAmB,UAAnB,C,CAEA;;AACA,MAAMC,kBAAkB,GAAG,EAA3B;AAEA,MAAMC,KAAK,GAAG;AACbC,EAAAA,MAAM,EAAE;AACPC,IAAAA,MAAM,EAAE;AACPC,MAAAA,KAAK,EAAE,SADA;AAEPC,MAAAA,KAAK,EAAE,aAFA;AAGP,kBAAY,SAHL;AAIPC,MAAAA,IAAI,EAAE;AACLC,QAAAA,KAAK,EAAE;AADF;AAJC,KADD;AASPC,IAAAA,IAAI,EAAE;AACLC,MAAAA,MAAM,EAAE,SADH;AAELC,MAAAA,IAAI,EAAE;AAFD;AATC;AADK,CAAd;;AAiBA,MAAMC,GAAN,SAAkBf,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC3BgB,KAD2B,GACnB;AACPC,MAAAA,SAAS,EAAE,GADJ;AAEPC,MAAAA,gBAAgB,EAAE,YAFX;AAGPC,MAAAA,WAAW,EAAE,EAHN;AAIPC,MAAAA,WAAW,EAAE,EAJN;AAKPC,MAAAA,OAAO,EAAE;AALF,KADmB;;AAAA,SAa3BC,eAb2B,GAaTC,CAAC,IAAI;AACtB,WAAKC,QAAL,CAAc;AAAEP,QAAAA,SAAS,EAAEM,CAAC,CAACE,MAAF,CAASC;AAAtB,OAAd;AACA,KAf0B;;AAAA,SAiB3BC,sBAjB2B,GAiBFJ,CAAC,IAAI;AAC7B,WAAKC,QAAL,CAAc;AAAEN,QAAAA,gBAAgB,EAAEK,CAAC,CAACE,MAAF,CAASG;AAA7B,OAAd;AACA,KAnB0B;;AAAA,SAqB3BC,gBArB2B,GAqBR,MAAM;AACxB,UAAIV,WAAW,GAAG,EAAlB;AAAA,UACCW,IAAI,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,WAAhC,CADR;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKjB,KAAL,CAAWC,SAA/B,EAA0CgB,CAAC,EAA3C,EAA+C;AAC9Cd,QAAAA,WAAW,CAACe,IAAZ,CACC,MAAM,IAAIC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBF,IAAI,CAACC,KAAL,CAAW,GAAX,CAA3B,CADX;;AAGA,YAAIN,IAAI,CAACG,CAAD,CAAJ,KAAYK,SAAhB,EAA2B;AAC1BR,UAAAA,IAAI,CAACG,CAAD,CAAJ,CAAQM,KAAR,CAAcC,eAAd,GAAgC,SAAhC;AACA;AACD;;AAED,WAAKhB,QAAL,CAAc;AACbL,QAAAA,WAAW,EAAEA;AADA,OAAd;AAGA,KApC0B;;AAAA,SAsC3BsB,IAtC2B,GAsCpB,CAACC,GAAD,EAAMT,CAAN,EAASU,CAAT,EAAYC,SAAZ,KAA0B;AAChC,YAAMC,IAAI,GAAGH,GAAG,CAACT,CAAD,CAAhB;AACAW,MAAAA,SAAS,CAACV,IAAV,CAAe,CAACD,CAAD,EAAIU,CAAJ,EAAO,GAAP,CAAf;AACAD,MAAAA,GAAG,CAACT,CAAD,CAAH,GAASS,GAAG,CAACC,CAAD,CAAZ;AACAD,MAAAA,GAAG,CAACC,CAAD,CAAH,GAASE,IAAT;AACA,KA3C0B;;AAAA,SA6C3BC,aA7C2B,GA6CX,CAACC,EAAD,EAAKH,SAAL,KAAmB;AAClC,UAAII,WAAW,GAAG,KAAlB;AACAJ,MAAAA,SAAS,CAACK,OAAV,CAAkBC,OAAO,IAAI;AAC5B,YACCA,OAAO,CAAC,CAAD,CAAP,KAAe,GAAf,IACAA,OAAO,CAAC,CAAD,CAAP,KAAe,SADf,IAEAA,OAAO,CAAC,CAAD,CAAP,KAAeH,EAHhB,EAIE;AACDC,UAAAA,WAAW,GAAG,IAAd;AACAG,UAAAA,OAAO,CAACC,GAAR,CAAYL,EAAZ;AACA;AACD,OATD;AAUA,aAAOC,WAAP;AACA,KA1D0B;;AAAA,SA4D3BK,SA5D2B,GA4Df,CAACX,GAAD,EAAMY,KAAN,EAAaC,IAAb,EAAmBC,KAAnB,EAA0BZ,SAA1B,EAAqCa,SAArC,KAAmD;AAC9D,UAAIC,UAAU,GAAGhB,GAAG,CAACY,KAAD,CAApB;AAAA,UACCK,cAAc,GAAGJ,IADlB,CAD8D,CAG9D;;AACAX,MAAAA,SAAS,CAACV,IAAV,CAAe,CAAC,SAAD,EAAYoB,KAAZ,EAAmB,GAAnB,CAAf;;AACA,WAAK,IAAIrB,CAAC,GAAGsB,IAAb,EAAmBtB,CAAC,GAAGuB,KAAvB,EAA8BvB,CAAC,EAA/B,EAAmC;AAClC;AACAW,QAAAA,SAAS,CAACV,IAAV,CAAe,CAAC,SAAD,EAAYyB,cAAZ,EAA4B,GAA5B,CAAf,EAFkC,CAGlC;;AACAf,QAAAA,SAAS,CAACV,IAAV,CAAe,CAAC,SAAD,EAAYD,CAAZ,EAAe,GAAf,CAAf;;AACA,YAAIS,GAAG,CAACT,CAAD,CAAH,GAASyB,UAAb,EAAyB;AACxB;AACAd,UAAAA,SAAS,CAACV,IAAV,CAAe,CAAC,SAAD,EAAYD,CAAZ,EAAe,GAAf,CAAf,EAFwB,CAGxB;;AACAW,UAAAA,SAAS,CAACV,IAAV,CAAe,CAAC,SAAD,EAAYD,CAAZ,EAAe,GAAf,CAAf;AACA,eAAKQ,IAAL,CAAUC,GAAV,EAAeT,CAAf,EAAkB0B,cAAlB,EAAkCf,SAAlC,EALwB,CAMxB;;AACAA,UAAAA,SAAS,CAACV,IAAV,CAAe,CAAC,SAAD,EAAYyB,cAAZ,EAA4B,GAA5B,CAAf;AACAA,UAAAA,cAAc,GARU,CASxB;;AACAf,UAAAA,SAAS,CAACV,IAAV,CAAe,CAAC,SAAD,EAAYyB,cAAZ,EAA4B,GAA5B,CAAf;AACA,SAhBiC,CAiBlC;;;AACAf,QAAAA,SAAS,CAACV,IAAV,CAAe,CAAC,SAAD,EAAYD,CAAZ,EAAe,GAAf,CAAf;AACA,OAxB6D,CAyB9D;;;AACAW,MAAAA,SAAS,CAACV,IAAV,CAAe,CAAC,SAAD,EAAYyB,cAAZ,EAA4B,GAA5B,CAAf;AACA,WAAKlB,IAAL,CAAUC,GAAV,EAAec,KAAf,EAAsBG,cAAtB,EAAsCf,SAAtC,EA3B8D,CA4B9D;;AACAA,MAAAA,SAAS,CAACV,IAAV,CAAe,CAAC,SAAD,EAAYoB,KAAZ,EAAmB,GAAnB,CAAf;AACA,aAAOK,cAAP;AACA,KA3F0B;;AAAA,SA6F3BC,SA7F2B,GA6Ff,CAAClB,GAAD,EAAMa,IAAN,EAAYC,KAAZ,EAAmBZ,SAAnB,KAAiC;AAC5C,UAAIU,KAAJ,EAAWK,cAAX;;AAEA,UAAIJ,IAAI,GAAGC,KAAX,EAAkB;AACjBF,QAAAA,KAAK,GAAGE,KAAR;AACAG,QAAAA,cAAc,GAAG,KAAKN,SAAL,CAAeX,GAAf,EAAoBY,KAApB,EAA2BC,IAA3B,EAAiCC,KAAjC,EAAwCZ,SAAxC,CAAjB,CAFiB,CAIjB;;AACA,aAAKgB,SAAL,CAAelB,GAAf,EAAoBa,IAApB,EAA0BI,cAAc,GAAG,CAA3C,EAA8Cf,SAA9C;AACAF,QAAAA,GAAG,CAACO,OAAJ,CAAY,CAACvB,KAAD,EAAQqB,EAAR,KAAe;AAC1B,cACCU,SAAS,CAACV,EAAD,CAAT,KAAkBrB,KAAlB,IACA,CAAC,KAAKoB,aAAL,CAAmBC,EAAnB,EAAuBH,SAAvB,CAFF,EAGE;AACDA,YAAAA,SAAS,CAACV,IAAV,CAAe,CAAC,SAAD,EAAYa,EAAZ,EAAgB,GAAhB,CAAf;AACA;AACD,SAPD;AAQA,aAAKa,SAAL,CACClB,GADD,EAECiB,cAAc,GAAG,CAFlB,EAGCH,KAHD,EAICZ,SAJD,EAKCa,SALD;AAOAf,QAAAA,GAAG,CAACO,OAAJ,CAAY,CAACvB,KAAD,EAAQqB,EAAR,KAAe;AAC1B,cACCU,SAAS,CAACV,EAAD,CAAT,KAAkBrB,KAAlB,IACA,CAAC,KAAKoB,aAAL,CAAmBC,EAAnB,EAAuBH,SAAvB,CAFF,EAGE;AACDA,YAAAA,SAAS,CAACV,IAAV,CAAe,CAAC,SAAD,EAAYa,EAAZ,EAAgB,GAAhB,CAAf;AACA;AACD,SAPD;AAQA;;AAED,aAAOL,GAAP;AACA,KAhI0B;;AAAA,SAkI3BmB,cAlI2B,GAkIVjB,SAAS,IAAI;AAC7B,WAAK,IAAIX,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGW,SAAS,CAACkB,MAA9B,EAAsC7B,CAAC,EAAvC,EAA2C;AAC1C,cAAM8B,aAAa,GAAGnB,SAAS,CAACX,CAAD,CAAT,CAAa,CAAb,MAAoB,GAApB,GAA0B,IAA1B,GAAiC,KAAvD;AAAA,cACC+B,MAAM,GAAGpB,SAAS,CAACX,CAAD,CAAT,CAAa,CAAb,MAAoB,GAApB,GAA0B,IAA1B,GAAiC,KAD3C;AAAA,cAECgC,eAAe,GAAGhC,CAAC,KAAKW,SAAS,CAACkB,MAAV,GAAmB,CAAzB,GAA6B,IAA7B,GAAoC,KAFvD;;AAGA,YAAIC,aAAJ,EAAmB;AAAA,8CACKnB,SAAS,CAACX,CAAD,CADd;AAAA,gBACXiC,KADW;AAAA,gBACJC,KADI;;AAElBC,UAAAA,UAAU,CAAC,MAAM;AAChBrC,YAAAA,QAAQ,CAACC,sBAAT,CAAgC,WAAhC,EACCmC,KADD,EAEE5B,KAFF,CAEQC,eAFR,GAE0B0B,KAF1B;AAGA,WAJS,EAIPjC,CAAC,GAAG7B,kBAJG,CAAV;AAKA,SAPD,MAOO,IAAI4D,MAAJ,EAAY;AAClBI,UAAAA,UAAU,CAAC,MAAM;AAAA,iDACDxB,SAAS,CAACX,CAAD,CADR;AAAA,kBACToC,CADS;AAAA,kBACNC,CADM;;AAEhB,gBAAI5B,GAAG,GAAG,KAAK1B,KAAL,CAAWG,WAAX,CAAuBoD,GAAvB,CAA2BF,CAAC,IAAIA,CAAhC,CAAV;AACA,kBAAMxB,IAAI,GAAGH,GAAG,CAAC2B,CAAD,CAAhB;AACA3B,YAAAA,GAAG,CAAC2B,CAAD,CAAH,GAAS3B,GAAG,CAAC4B,CAAD,CAAZ;AACA5B,YAAAA,GAAG,CAAC4B,CAAD,CAAH,GAASzB,IAAT;AACA,iBAAKrB,QAAL,CAAc;AAAEL,cAAAA,WAAW,EAAEuB;AAAf,aAAd;AACA,WAPS,EAOPT,CAAC,GAAG7B,kBAPG,CAAV;AAQA;;AAED,YAAI6D,eAAJ,EAAqB;AACpBG,UAAAA,UAAU,CAAC,MAAM;AAChB,iBAAK5C,QAAL,CAAc;AAAEH,cAAAA,OAAO,EAAE;AAAX,aAAd;AACA,WAFS,EAEPY,CAAC,GAAG7B,kBAFG,CAAV;AAGA;AACD;AACD,KA/J0B;;AAAA,SAiK3BoE,YAjK2B,GAiKZ,MAAM;AACpB,WAAKhD,QAAL,CAAc;AAAEH,QAAAA,OAAO,EAAE;AAAX,OAAd;AACA,UAAIqB,GAAG,GAAG,KAAK1B,KAAL,CAAWG,WAAX,CAAuBoD,GAAvB,CAA2BF,CAAC,IAAIA,CAAhC,CAAV;AACA,UAAIZ,SAAS,GAAG,KAAKzC,KAAL,CAAWG,WAAX,CAAuBoD,GAAvB,CAA2BF,CAAC,IAAIA,CAAhC,CAAhB;AACA,UAAIzB,SAAS,GAAG,EAAhB;;AACA,UAAI,KAAK5B,KAAL,CAAWE,gBAAX,KAAgC,YAApC,EAAkD;AACjDuC,QAAAA,SAAS,CAACgB,IAAV,CAAe,CAACJ,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAA7B;AACA,aAAKV,SAAL,CAAelB,GAAf,EAAoB,CAApB,EAAuBA,GAAG,CAACoB,MAAJ,GAAa,CAApC,EAAuClB,SAAvC;AACA;;AACD,WAAKiB,cAAL,CAAoBjB,SAApB;AACA,KA3K0B;AAAA;;AAS3B8B,EAAAA,iBAAiB,GAAG;AACnB,SAAK7C,gBAAL;AACA;;AAkKD8C,EAAAA,MAAM,GAAG;AACR,WACC,oBAAC,OAAD;AAAS,MAAA,KAAK,EAAEtE,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,oBAAC,MAAD;AACC,MAAA,eAAe,EAAE,KAAKiB,eADvB;AAEC,MAAA,sBAAsB,EAAE,KAAKK,sBAF9B;AAGC,MAAA,SAAS,EAAE,KAAKX,KAAL,CAAWC,SAHvB;AAIC,MAAA,gBAAgB,EAAE,KAAKD,KAAL,CAAWE,gBAJ9B;AAKC,MAAA,gBAAgB,EAAE,KAAKW,gBALxB;AAMC,MAAA,YAAY,EAAE,KAAK2C,YANpB;AAOC,MAAA,OAAO,EAAE,KAAKxD,KAAL,CAAWK,OAPrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,EAUC,oBAAC,GAAD;AACC,MAAA,OAAO,EAAC,QADT;AAEC,MAAA,MAAM,EAAE;AAAEuD,QAAAA,UAAU,EAAE;AAAd,OAFT;AAGC,MAAA,SAAS,EAAC,KAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKE,KAAK5D,KAAL,CAAWG,WAAX,CAAuBoD,GAAvB,CAA2B,CAAC7C,KAAD,EAAQmD,QAAR,KAC3B,oBAAC,GAAD;AACC,MAAA,GAAG,EAAEA,QADN;AAEC,MAAA,KAAK,EAAC,KAFP;AAGC,MAAA,MAAM,EAAEnD,KAAK,GAAG,IAHjB;AAIC,MAAA,MAAM,EAAC,KAJR;AAKC,MAAA,UAAU,EAAC,UALZ;AAMC,MAAA,SAAS,EAAC,WANX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,CALF,CAVD,CADD;AA6BA;;AA3M0B;;AA8M5B,eAAeX,GAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { Box, Grommet } from 'grommet';\r\nimport Header from './Header';\r\n\r\n// change this value for the speed of the animation\r\nconst ANIMATION_SPEED_MS = 10;\r\n\r\nconst theme = {\r\n\tglobal: {\r\n\t\tcolors: {\r\n\t\t\tbrand: '#061533',\r\n\t\t\tfocus: 'transparent',\r\n\t\t\t'accent-1': '#B578E8',\r\n\t\t\ttext: {\r\n\t\t\t\tlight: '#000'\r\n\t\t\t}\r\n\t\t},\r\n\t\tfont: {\r\n\t\t\tfamily: 'Poppins',\r\n\t\t\tsize: '18px'\r\n\t\t}\r\n\t}\r\n};\r\n\r\nclass App extends Component {\r\n\tstate = {\r\n\t\tarraySize: 100,\r\n\t\tsortingAlgorithm: 'Quick Sort',\r\n\t\tarrayValues: [],\r\n\t\tarrayColors: [],\r\n\t\tsorting: false\r\n\t};\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.generateNewArray();\r\n\t}\r\n\r\n\tupdateArraySize = e => {\r\n\t\tthis.setState({ arraySize: e.target.value });\r\n\t};\r\n\r\n\tupdateSortingAlgorithm = e => {\r\n\t\tthis.setState({ sortingAlgorithm: e.target.innerText });\r\n\t};\r\n\r\n\tgenerateNewArray = () => {\r\n\t\tlet arrayValues = [],\r\n\t\t\tbars = document.getElementsByClassName('array-bar');\r\n\t\tfor (let i = 0; i < this.state.arraySize; i++) {\r\n\t\t\tarrayValues.push(\r\n\t\t\t\t100 + 5 * Math.floor(Math.random() * Math.floor(100))\r\n\t\t\t);\r\n\t\t\tif (bars[i] !== undefined) {\r\n\t\t\t\tbars[i].style.backgroundColor = '#B578E8';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.setState({\r\n\t\t\tarrayValues: arrayValues\r\n\t\t});\r\n\t};\r\n\r\n\tswap = (arr, i, j, animation) => {\r\n\t\tconst temp = arr[i];\r\n\t\tanimation.push([i, j, 's']);\r\n\t\tarr[i] = arr[j];\r\n\t\tarr[j] = temp;\r\n\t};\r\n\r\n\thasBlueColour = (id, animation) => {\r\n\t\tlet returnValue = false;\r\n\t\tanimation.forEach(element => {\r\n\t\t\tif (\r\n\t\t\t\telement[2] === 'c' &&\r\n\t\t\t\telement[0] === '#6399F1' &&\r\n\t\t\t\telement[1] === id\r\n\t\t\t) {\r\n\t\t\t\treturnValue = true;\r\n\t\t\t\tconsole.log(id);\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn returnValue;\r\n\t};\r\n\r\n\tpartition = (arr, pivot, left, right, animation, sortedArr) => {\r\n\t\tlet pivotValue = arr[pivot],\r\n\t\t\tpartitionIndex = left;\r\n\t\t// add pivot\r\n\t\tanimation.push(['#FF4040', pivot, 'c']);\r\n\t\tfor (let i = left; i < right; i++) {\r\n\t\t\t// add partition index\r\n\t\t\tanimation.push(['#FFAA15', partitionIndex, 'c']);\r\n\t\t\t// add comparison\r\n\t\t\tanimation.push(['#FF4040', i, 'c']);\r\n\t\t\tif (arr[i] < pivotValue) {\r\n\t\t\t\t// comparison success\r\n\t\t\t\tanimation.push(['#6FFFB0', i, 'c']);\r\n\t\t\t\t// remove comparison success\r\n\t\t\t\tanimation.push(['#B578E8', i, 'c']);\r\n\t\t\t\tthis.swap(arr, i, partitionIndex, animation);\r\n\t\t\t\t// remove old partition index\r\n\t\t\t\tanimation.push(['#B578E8', partitionIndex, 'c']);\r\n\t\t\t\tpartitionIndex++;\r\n\t\t\t\t// add new partition index\r\n\t\t\t\tanimation.push(['#FFAA15', partitionIndex, 'c']);\r\n\t\t\t}\r\n\t\t\t// remove comparison\r\n\t\t\tanimation.push(['#B578E8', i, 'c']);\r\n\t\t}\r\n\t\t// remove partition index\r\n\t\tanimation.push(['#B578E8', partitionIndex, 'c']);\r\n\t\tthis.swap(arr, right, partitionIndex, animation);\r\n\t\t// remove pivot\r\n\t\tanimation.push(['#B578E8', pivot, 'c']);\r\n\t\treturn partitionIndex;\r\n\t};\r\n\r\n\tquickSort = (arr, left, right, animation) => {\r\n\t\tlet pivot, partitionIndex;\r\n\r\n\t\tif (left < right) {\r\n\t\t\tpivot = right;\r\n\t\t\tpartitionIndex = this.partition(arr, pivot, left, right, animation);\r\n\r\n\t\t\t//sort left and right\r\n\t\t\tthis.quickSort(arr, left, partitionIndex - 1, animation);\r\n\t\t\tarr.forEach((value, id) => {\r\n\t\t\t\tif (\r\n\t\t\t\t\tsortedArr[id] === value &&\r\n\t\t\t\t\t!this.hasBlueColour(id, animation)\r\n\t\t\t\t) {\r\n\t\t\t\t\tanimation.push(['#6399F1', id, 'c']);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tthis.quickSort(\r\n\t\t\t\tarr,\r\n\t\t\t\tpartitionIndex + 1,\r\n\t\t\t\tright,\r\n\t\t\t\tanimation,\r\n\t\t\t\tsortedArr\r\n\t\t\t);\r\n\t\t\tarr.forEach((value, id) => {\r\n\t\t\t\tif (\r\n\t\t\t\t\tsortedArr[id] === value &&\r\n\t\t\t\t\t!this.hasBlueColour(id, animation)\r\n\t\t\t\t) {\r\n\t\t\t\t\tanimation.push(['#6399F1', id, 'c']);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn arr;\r\n\t};\r\n\r\n\tanimateSorting = animation => {\r\n\t\tfor (let i = 0; i < animation.length; i++) {\r\n\t\t\tconst isColorChange = animation[i][2] === 'c' ? true : false,\r\n\t\t\t\tisSwap = animation[i][2] === 's' ? true : false,\r\n\t\t\t\tisLastIteration = i === animation.length - 1 ? true : false;\r\n\t\t\tif (isColorChange) {\r\n\t\t\t\tconst [color, barId] = animation[i];\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tdocument.getElementsByClassName('array-bar')[\r\n\t\t\t\t\t\tbarId\r\n\t\t\t\t\t].style.backgroundColor = color;\r\n\t\t\t\t}, i * ANIMATION_SPEED_MS);\r\n\t\t\t} else if (isSwap) {\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tconst [a, b] = animation[i];\r\n\t\t\t\t\tlet arr = this.state.arrayValues.map(a => a);\r\n\t\t\t\t\tconst temp = arr[a];\r\n\t\t\t\t\tarr[a] = arr[b];\r\n\t\t\t\t\tarr[b] = temp;\r\n\t\t\t\t\tthis.setState({ arrayValues: arr });\r\n\t\t\t\t}, i * ANIMATION_SPEED_MS);\r\n\t\t\t}\r\n\r\n\t\t\tif (isLastIteration) {\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tthis.setState({ sorting: false });\r\n\t\t\t\t}, i * ANIMATION_SPEED_MS);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tstartSorting = () => {\r\n\t\tthis.setState({ sorting: true });\r\n\t\tlet arr = this.state.arrayValues.map(a => a);\r\n\t\tlet sortedArr = this.state.arrayValues.map(a => a);\r\n\t\tlet animation = [];\r\n\t\tif (this.state.sortingAlgorithm === 'Quick Sort') {\r\n\t\t\tsortedArr.sort((a, b) => a - b);\r\n\t\t\tthis.quickSort(arr, 0, arr.length - 1, animation);\r\n\t\t}\r\n\t\tthis.animateSorting(animation);\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Grommet theme={theme}>\r\n\t\t\t\t<Header\r\n\t\t\t\t\tupdateArraySize={this.updateArraySize}\r\n\t\t\t\t\tupdateSortingAlgorithm={this.updateSortingAlgorithm}\r\n\t\t\t\t\tarraySize={this.state.arraySize}\r\n\t\t\t\t\tsortingAlgorithm={this.state.sortingAlgorithm}\r\n\t\t\t\t\tgenerateNewArray={this.generateNewArray}\r\n\t\t\t\t\tstartSorting={this.startSorting}\r\n\t\t\t\t\tsorting={this.state.sorting}\r\n\t\t\t\t/>\r\n\t\t\t\t<Box\r\n\t\t\t\t\tjustify=\"center\"\r\n\t\t\t\t\tmargin={{ horizontal: 'xlarge' }}\r\n\t\t\t\t\tdirection=\"row\"\r\n\t\t\t\t>\r\n\t\t\t\t\t{this.state.arrayValues.map((value, position) => (\r\n\t\t\t\t\t\t<Box\r\n\t\t\t\t\t\t\tkey={position}\r\n\t\t\t\t\t\t\twidth=\"3px\"\r\n\t\t\t\t\t\t\theight={value + 'px'}\r\n\t\t\t\t\t\t\tmargin=\"1px\"\r\n\t\t\t\t\t\t\tbackground=\"accent-1\"\r\n\t\t\t\t\t\t\tclassName=\"array-bar\"\r\n\t\t\t\t\t\t></Box>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</Box>\r\n\t\t\t</Grommet>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}