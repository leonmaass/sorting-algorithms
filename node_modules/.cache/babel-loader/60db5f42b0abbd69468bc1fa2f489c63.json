{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { cloneElement, Children, useState } from 'react';\nimport { compose } from 'recompose';\nimport { withTheme } from 'styled-components';\nimport { colorIsDark, normalizeBackground, normalizeColor } from '../../utils';\nimport { defaultProps } from '../../default-props';\nimport { Box } from '../Box';\nimport { withFocus, withForwardRef } from '../hocs';\nimport { StyledButton } from './StyledButton';\n\nvar Button = function Button(_ref) {\n  var a11yTitle = _ref.a11yTitle,\n      color = _ref.color,\n      forwardRef = _ref.forwardRef,\n      children = _ref.children,\n      disabled = _ref.disabled,\n      icon = _ref.icon,\n      gap = _ref.gap,\n      fill = _ref.fill,\n      focus = _ref.focus,\n      href = _ref.href,\n      label = _ref.label,\n      onClick = _ref.onClick,\n      onMouseOut = _ref.onMouseOut,\n      onMouseOver = _ref.onMouseOver,\n      plain = _ref.plain,\n      primary = _ref.primary,\n      reverse = _ref.reverse,\n      theme = _ref.theme,\n      type = _ref.type,\n      as = _ref.as,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"a11yTitle\", \"color\", \"forwardRef\", \"children\", \"disabled\", \"icon\", \"gap\", \"fill\", \"focus\", \"href\", \"label\", \"onClick\", \"onMouseOut\", \"onMouseOver\", \"plain\", \"primary\", \"reverse\", \"theme\", \"type\", \"as\"]);\n\n  if ((icon || label) && children) {\n    console.warn('Button should not have children if icon or label is provided');\n  }\n\n  var isDarkBackground = function isDarkBackground() {\n    var backgroundColor = normalizeBackground(normalizeColor(color || theme.button.primary.color || theme.global.colors.control || 'brand', theme), theme);\n    return colorIsDark(backgroundColor, theme);\n  };\n\n  var _useState = useState(false),\n      hover = _useState[0],\n      setHover = _useState[1];\n\n  var onMouseOverButton = function onMouseOverButton(event) {\n    setHover(true);\n\n    if (onMouseOver) {\n      onMouseOver(event);\n    }\n  };\n\n  var onMouseOutButton = function onMouseOutButton(event) {\n    setHover(false);\n\n    if (onMouseOut) {\n      onMouseOut(event);\n    }\n  };\n\n  var buttonIcon = icon; // only change color if user did not specify the color themselves...\n\n  if (primary && icon && !icon.props.color) {\n    buttonIcon = cloneElement(icon, {\n      color: theme.global.colors.text[isDarkBackground() ? 'dark' : 'light']\n    });\n  }\n\n  var domTag = !as && href ? 'a' : as;\n  var first = reverse ? label : buttonIcon;\n  var second = reverse ? buttonIcon : label;\n  var contents;\n\n  if (first && second) {\n    contents = React.createElement(Box, {\n      direction: \"row\",\n      align: \"center\",\n      justify: \"center\",\n      gap: gap\n    }, first, second);\n  } else if (typeof children === 'function') {\n    contents = children({\n      hover: hover,\n      focus: focus\n    });\n  } else {\n    contents = first || second || children;\n  } // the key events are covered by withFocus()\n\n  /* eslint-disable jsx-a11y/mouse-events-have-key-events */\n\n\n  return React.createElement(StyledButton, _extends({}, rest, {\n    as: domTag,\n    ref: forwardRef,\n    \"aria-label\": a11yTitle,\n    colorValue: color,\n    disabled: disabled,\n    hasIcon: !!icon,\n    gap: gap,\n    hasLabel: !!label,\n    fillContainer: fill,\n    focus: focus,\n    href: href,\n    onClick: onClick,\n    onMouseOver: onMouseOverButton,\n    onMouseOut: onMouseOutButton,\n    pad: !plain,\n    plain: typeof plain !== 'undefined' ? plain : Children.count(children) > 0 || icon && !label,\n    primary: primary,\n    type: !href ? type : undefined\n  }), contents);\n};\n\nButton.defaultProps = {\n  type: 'button',\n  focusIndicator: true,\n  gap: 'small'\n};\nObject.setPrototypeOf(Button.defaultProps, defaultProps);\nvar ButtonDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line global-require\n  ButtonDoc = require('./doc').doc(Button);\n}\n\nvar ButtonWrapper = compose(withFocus(), withTheme, withForwardRef)(ButtonDoc || Button);\nexport { ButtonWrapper as Button };","map":null,"metadata":{},"sourceType":"module"}